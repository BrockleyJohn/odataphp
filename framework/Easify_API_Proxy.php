
<?php
  /*
    Copyright 2010 Persistent Systems Limited

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   */

    /**
    * This code was generated by the tool 'PHPDataSvcUtil.php'.
    * Runtime Version:1.0
    *
    * Changes to this file may cause incorrect behavior and will be lost if
    * the code is regenerated.
    */

    require_once 'Context/ObjectContext.php';
    /**
    * Defines default OData Service URL for this proxy class
    */
    define("DEFAULT_ODATA_SERVICE_URL", EASIFY_SERVICE_LOCATION);
    
   /**
    * @class:Product
    * @type:EntityType
    * @key:SKU
    */
    class Product extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $SKU;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $CategoryId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SubcategoryId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $OurStockCode;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $EANCode;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $ManufacturerStockCode;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $SupplierStockCode;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ManufacturerId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $CostPrice;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $Markup;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Comments;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $StockLevel;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Discontinued;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $PriceChangeDate;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $MinStockLevel;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ReorderQty;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Boolean
        */
        public $ReorderWhenLow;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SupplierId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $RetailMargin;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $TradeMargin;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $TaxId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $LastStockCheckDate;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Published;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Allocatable;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $LoyaltyPoints;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Weight;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ItemTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $LocationId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $DiscontinueWhenDepleted;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DateAddedToEasify;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $WebInfoPresent;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $x_SupplierName;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $x_WebInfoPicChanged;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Tags;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ConditionId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $ConditionDescription;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $UseSecondHandVat;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ITEMS_SUB_ITEM_TYPES_LOOKUP
        * @FromRole:Products
        * @ToRole:SUB_ITEM_TYPES_LOOKUP
        */
        public $ProductSubcategory;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ITEMS_MANUFACTURER_LOOKUP
        * @FromRole:Products
        * @ToRole:Manufacturers
        */
        public $Manufacturer;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:ProductCategoriesProducts
        * @FromRole:Products
        * @ToRole:ProductCategories
        */
        public $ProductCategory;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:ItemTypesProducts
        * @FromRole:Products
        * @ToRole:ItemTypes
        */
        public $ProductType;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ITEMS_VENDORS
        * @FromRole:Items
        * @ToRole:VENDOR
        */
        public $Supplier;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ITEMS_ProductLocations
        * @FromRole:Products
        * @ToRole:ProductLocation
        */
        public $ProductLocation;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ITEMS_TaxRates
        * @FromRole:Products
        * @ToRole:TaxRate
        */
        public $TaxRate;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ProductInfo_ITEMS
        * @FromRole:Products
        * @ToRole:ProductInfo
        */
        public $ProductInfo;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ProductsAllocatedToOrders_ITEMS
        * @FromRole:Products
        * @ToRole:ProductsAllocatedToOrder
        */
        public $ProductsAllocatedToOrders;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDER_ELEMENTS_ITEMS1
        * @FromRole:Product
        * @ToRole:ORDER_ELEMENTS
        */
        public $OrderDetails;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ITEMS_ProductConditions
        * @FromRole:Product
        * @ToRole:ProductCondition
        */
        public $ProductCondition;
    

       /**
        * Function to create an instance of Product
        * @param Edm.Int32 $SKU
        * @param Edm.Boolean $ReorderWhenLow
        * @param Edm.Int32 $ItemTypeId
        */
        public static function CreateProduct(
            $SKU, 
            $ReorderWhenLow, 
            $ItemTypeId)
        {   
            $Product = new Product();
            $Product->SKU = $SKU;
            $Product->ReorderWhenLow = $ReorderWhenLow;
            $Product->ItemTypeId = $ItemTypeId;
            return $Product;
        }

       /**
        * Constructor for Product
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['ProductSubcategory'] = 'SUB_ITEM_TYPES_LOOKUP';
            $this->_entityMap['Manufacturer'] = 'Manufacturers';
            $this->_entityMap['ProductCategory'] = 'ProductCategories';
            $this->_entityMap['ProductType'] = 'ItemTypes';
            $this->_entityMap['Supplier'] = 'VENDOR';
            $this->_entityMap['ProductLocation'] = 'ProductLocation';
            $this->_entityMap['TaxRate'] = 'TaxRate';
            $this->_entityMap['ProductInfo'] = 'ProductInfo';
            $this->_entityMap['ProductsAllocatedToOrders'] = 'ProductsAllocatedToOrder';
            $this->_entityMap['OrderDetails'] = 'ORDER_ELEMENTS';
            $this->_entityMap['ProductCondition'] = 'ProductCondition';
            $this->_entityKey[] = 'SKU';
            $this->ProductSubcategory = array();
            $this->Manufacturer = array();
            $this->ProductCategory = array();
            $this->ProductType = array();
            $this->Supplier = array();
            $this->ProductLocation = array();
            $this->TaxRate = array();
            $this->ProductInfo = array();
            $this->ProductsAllocatedToOrders = array();
            $this->OrderDetails = array();
            $this->ProductCondition = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ProductCategory
    * @type:EntityType
    * @key:CategoryId
    */
    class ProductCategory extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $CategoryId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $SystemReserved;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $DefaultRetailMargin;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $DefaultTradeMargin;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $DefaultLoyaltyPoints;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $DefaultWeight;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $CategoryTypeId;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:ProductCategoriesProducts
        * @FromRole:ProductCategories
        * @ToRole:Products
        */
        public $Products;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:ProductCategoryProductCategoryType
        * @FromRole:ProductCategory
        * @ToRole:ProductCategoryType
        */
        public $ProductCategoryType;
    

       /**
        * Function to create an instance of ProductCategory
        * @param Edm.Int32 $CategoryId
        * @param Edm.Int32 $CategoryTypeId
        */
        public static function CreateProductCategory(
            $CategoryId, 
            $CategoryTypeId)
        {   
            $ProductCategory = new ProductCategory();
            $ProductCategory->CategoryId = $CategoryId;
            $ProductCategory->CategoryTypeId = $CategoryTypeId;
            return $ProductCategory;
        }

       /**
        * Constructor for ProductCategory
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Products'] = 'Products';
            $this->_entityMap['ProductCategoryType'] = 'ProductCategoryType';
            $this->_entityKey[] = 'CategoryId';
            $this->Products = array();
            $this->ProductCategoryType = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ProductSubcategory
    * @type:EntityType
    * @key:SubCategoryId
    */
    class ProductSubcategory extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $SubCategoryId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $CategoryId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Published;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $DefaultRetailMargin;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $DefaultTradeMargin;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $DefaultLoyaltyPoints;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $DefaultWeight;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $CategoryTypeId;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ITEMS_SUB_ITEM_TYPES_LOOKUP
        * @FromRole:SUB_ITEM_TYPES_LOOKUP
        * @ToRole:Products
        */
        public $Products;
    

       /**
        * Function to create an instance of ProductSubcategory
        * @param Edm.Int32 $SubCategoryId
        * @param Edm.Int32 $CategoryTypeId
        */
        public static function CreateProductSubcategory(
            $SubCategoryId, 
            $CategoryTypeId)
        {   
            $ProductSubcategory = new ProductSubcategory();
            $ProductSubcategory->SubCategoryId = $SubCategoryId;
            $ProductSubcategory->CategoryTypeId = $CategoryTypeId;
            return $ProductSubcategory;
        }

       /**
        * Constructor for ProductSubcategory
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Products'] = 'Products';
            $this->_entityKey[] = 'SubCategoryId';
            $this->Products = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Config
    * @type:EntityType
    * @key:ConfigId
    */
    class Config extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ConfigId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Mnemonic;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Value;
    

       /**
        * Function to create an instance of Config
        * @param Edm.Int32 $ConfigId
        * @param Edm.String $Mnemonic
        * @param Edm.String $Description
        */
        public static function CreateConfig(
            $ConfigId, 
            $Mnemonic, 
            $Description)
        {   
            $Config = new Config();
            $Config->ConfigId = $ConfigId;
            $Config->Mnemonic = $Mnemonic;
            $Config->Description = $Description;
            return $Config;
        }

       /**
        * Constructor for Config
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityKey[] = 'ConfigId';
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Manufacturer
    * @type:EntityType
    * @key:ManufacturerId
    */
    class Manufacturer extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ManufacturerId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Name;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ITEMS_MANUFACTURER_LOOKUP
        * @FromRole:Manufacturers
        * @ToRole:Products
        */
        public $Products;
    

       /**
        * Function to create an instance of Manufacturer
        * @param Edm.Int32 $ManufacturerId
        */
        public static function CreateManufacturer(
            $ManufacturerId)
        {   
            $Manufacturer = new Manufacturer();
            $Manufacturer->ManufacturerId = $ManufacturerId;
            return $Manufacturer;
        }

       /**
        * Constructor for Manufacturer
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Products'] = 'Products';
            $this->_entityKey[] = 'ManufacturerId';
            $this->Products = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ProductType
    * @type:EntityType
    * @key:TypeId
    */
    class ProductType extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:ItemTypesProducts
        * @FromRole:ItemTypes
        * @ToRole:Products
        */
        public $Products;
    

       /**
        * Function to create an instance of ProductType
        * @param Edm.Int32 $TypeId
        * @param Edm.String $Description
        */
        public static function CreateProductType(
            $TypeId, 
            $Description)
        {   
            $ProductType = new ProductType();
            $ProductType->TypeId = $TypeId;
            $ProductType->Description = $Description;
            return $ProductType;
        }

       /**
        * Constructor for ProductType
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Products'] = 'Products';
            $this->_entityKey[] = 'TypeId';
            $this->Products = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:KnowledgebaseCategory
    * @type:EntityType
    * @key:CategoryId
    */
    class KnowledgebaseCategory extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $CategoryId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_tbKnowledgeBase_tbKBCategories
        * @FromRole:tbKBCategories
        * @ToRole:tbKnowledgeBase
        */
        public $Articles;
    

       /**
        * Function to create an instance of KnowledgebaseCategory
        * @param Edm.Int32 $CategoryId
        * @param Edm.String $Description
        */
        public static function CreateKnowledgebaseCategory(
            $CategoryId, 
            $Description)
        {   
            $KnowledgebaseCategory = new KnowledgebaseCategory();
            $KnowledgebaseCategory->CategoryId = $CategoryId;
            $KnowledgebaseCategory->Description = $Description;
            return $KnowledgebaseCategory;
        }

       /**
        * Constructor for KnowledgebaseCategory
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Articles'] = 'tbKnowledgeBase';
            $this->_entityKey[] = 'CategoryId';
            $this->Articles = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:KnowledgebaseArticle
    * @type:EntityType
    * @key:ArticleId
    */
    class KnowledgebaseArticle extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ArticleId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $CategoryId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Title;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Keywords;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Content;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Boolean
        */
        public $Private;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $CreatedBy;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DateCreated;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DateLastModified;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_tbKnowledgeBase_tbKBCategories
        * @FromRole:tbKnowledgeBase
        * @ToRole:tbKBCategories
        */
        public $KnowledgebaseCategory;
    

       /**
        * Function to create an instance of KnowledgebaseArticle
        * @param Edm.Int32 $ArticleId
        * @param Edm.Int32 $CategoryId
        * @param Edm.String $Title
        * @param Edm.String $Keywords
        * @param Edm.String $Content
        * @param Edm.Boolean $Private
        */
        public static function CreateKnowledgebaseArticle(
            $ArticleId, 
            $CategoryId, 
            $Title, 
            $Keywords, 
            $Content, 
            $Private)
        {   
            $KnowledgebaseArticle = new KnowledgebaseArticle();
            $KnowledgebaseArticle->ArticleId = $ArticleId;
            $KnowledgebaseArticle->CategoryId = $CategoryId;
            $KnowledgebaseArticle->Title = $Title;
            $KnowledgebaseArticle->Keywords = $Keywords;
            $KnowledgebaseArticle->Content = $Content;
            $KnowledgebaseArticle->Private = $Private;
            return $KnowledgebaseArticle;
        }

       /**
        * Constructor for KnowledgebaseArticle
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['KnowledgebaseCategory'] = 'tbKBCategories';
            $this->_entityKey[] = 'ArticleId';
            $this->KnowledgebaseCategory = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:PermissionCategory
    * @type:EntityType
    * @key:CategoryId
    */
    class PermissionCategory extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $CategoryId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Permissions_PermissionCategories
        * @FromRole:PermissionCategories
        * @ToRole:Permissions
        */
        public $Permissions;
    

       /**
        * Function to create an instance of PermissionCategory
        * @param Edm.Int32 $CategoryId
        * @param Edm.String $Description
        */
        public static function CreatePermissionCategory(
            $CategoryId, 
            $Description)
        {   
            $PermissionCategory = new PermissionCategory();
            $PermissionCategory->CategoryId = $CategoryId;
            $PermissionCategory->Description = $Description;
            return $PermissionCategory;
        }

       /**
        * Constructor for PermissionCategory
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Permissions'] = 'Permissions';
            $this->_entityKey[] = 'CategoryId';
            $this->Permissions = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Permission
    * @type:EntityType
    * @key:PermissionId
    */
    class Permission extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PermissionId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Mnemonic;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $CategoryId;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Permissions_PermissionCategories
        * @FromRole:Permissions
        * @ToRole:PermissionCategories
        */
        public $PermissionCategory;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:UsersPermissions
        * @FromRole:Permissions
        * @ToRole:Users
        */
        public $Users;
    

       /**
        * Function to create an instance of Permission
        * @param Edm.Int32 $PermissionId
        * @param Edm.String $Mnemonic
        * @param Edm.String $Description
        * @param Edm.Int32 $CategoryId
        */
        public static function CreatePermission(
            $PermissionId, 
            $Mnemonic, 
            $Description, 
            $CategoryId)
        {   
            $Permission = new Permission();
            $Permission->PermissionId = $PermissionId;
            $Permission->Mnemonic = $Mnemonic;
            $Permission->Description = $Description;
            $Permission->CategoryId = $CategoryId;
            return $Permission;
        }

       /**
        * Constructor for Permission
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['PermissionCategory'] = 'PermissionCategories';
            $this->_entityMap['Users'] = 'Users';
            $this->_entityKey[] = 'PermissionId';
            $this->PermissionCategory = array();
            $this->Users = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:User
    * @type:EntityType
    * @key:UserId
    */
    class User extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $UserId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $UserName;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Password;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Active;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $LastLogon;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Email;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $ReceiveAllInternalNotes;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $EasifyCloudEmailAddress;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $AllowEasifyCloudAccess;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $EasifyCloudPassword;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_UsersDialoguesDoNotPrompt_Users
        * @FromRole:Users
        * @ToRole:UsersDialoguesDoNotPrompt
        */
        public $UsersDialoguesDoNotPrompt;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:UsersPermissions
        * @FromRole:Users
        * @ToRole:Permissions
        */
        public $Permissions;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:PurchaseAssignments
        * @FromRole:Users
        * @ToRole:Purchase
        */
        public $AssignedPurchases;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDERS_Users
        * @FromRole:Users
        * @ToRole:Order
        */
        public $RaisedOrders;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ListViewUsersColumns_Users
        * @FromRole:User
        * @ToRole:ListViewUsersColumn
        */
        public $ListViewUsersColumns;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_JobHours_Users
        * @FromRole:User
        * @ToRole:JobHour
        */
        public $JobHours;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:JobAssignments
        * @FromRole:User
        * @ToRole:Order
        */
        public $AssignedOrders;
    

       /**
        * Function to create an instance of User
        * @param Edm.Int32 $UserId
        * @param Edm.String $UserName
        */
        public static function CreateUser(
            $UserId, 
            $UserName)
        {   
            $User = new User();
            $User->UserId = $UserId;
            $User->UserName = $UserName;
            return $User;
        }

       /**
        * Constructor for User
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['UsersDialoguesDoNotPrompt'] = 'UsersDialoguesDoNotPrompt';
            $this->_entityMap['Permissions'] = 'Permissions';
            $this->_entityMap['AssignedPurchases'] = 'Purchase';
            $this->_entityMap['RaisedOrders'] = 'Order';
            $this->_entityMap['ListViewUsersColumns'] = 'ListViewUsersColumn';
            $this->_entityMap['JobHours'] = 'JobHour';
            $this->_entityMap['AssignedOrders'] = 'Order';
            $this->_entityKey[] = 'UserId';
            $this->UsersDialoguesDoNotPrompt = array();
            $this->Permissions = array();
            $this->AssignedPurchases = array();
            $this->RaisedOrders = array();
            $this->ListViewUsersColumns = array();
            $this->JobHours = array();
            $this->AssignedOrders = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:UsersDialoguesDoNotPrompt
    * @type:EntityType
    * @key:DialogueId
    * @key:UserId
    */
    class UsersDialoguesDoNotPrompt extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $UserId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $DialogueId;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_UsersDialoguesDoNotPrompt_Users
        * @FromRole:UsersDialoguesDoNotPrompt
        * @ToRole:Users
        */
        public $User;
    

       /**
        * Function to create an instance of UsersDialoguesDoNotPrompt
        * @param Edm.Int32 $UserId
        * @param Edm.String $DialogueId
        */
        public static function CreateUsersDialoguesDoNotPrompt(
            $UserId, 
            $DialogueId)
        {   
            $UsersDialoguesDoNotPrompt = new UsersDialoguesDoNotPrompt();
            $UsersDialoguesDoNotPrompt->UserId = $UserId;
            $UsersDialoguesDoNotPrompt->DialogueId = $DialogueId;
            return $UsersDialoguesDoNotPrompt;
        }

       /**
        * Constructor for UsersDialoguesDoNotPrompt
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['User'] = 'Users';
            $this->_entityKey[] = 'DialogueId';
            $this->_entityKey[] = 'UserId';
            $this->User = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Purchase
    * @type:EntityType
    * @key:PurchaseId
    */
    class Purchase extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PurchaseId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.DateTime
        */
        public $DateCreated;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DateOrdered;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DateReceived;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DateInvoiced;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DateRequired;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DateExpected;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DatePaymentDue;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DatePaid;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Paid;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $UserId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Comments;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PurchaseStatusId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SupplierId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $SupplierRef;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $SupplierInvoiceNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PurchaseTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PaymentTermsId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $SerialNumbers;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $Tax;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $NotesToSupplier;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:PurchaseAssignments
        * @FromRole:Purchase
        * @ToRole:Users
        */
        public $AssignedUsers;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Purchases_PaymentTerms
        * @FromRole:Purchase
        * @ToRole:PaymentTerm
        */
        public $PaymentTerm;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Purchases_VENDORS
        * @FromRole:Purchase
        * @ToRole:Suppliers
        */
        public $Supplier;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_PurchaseDetails_Purchases
        * @FromRole:Purchase
        * @ToRole:PurchaseDetail
        */
        public $PurchaseDetails;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_PurchaseInternalNotes_Purchases
        * @FromRole:Purchase
        * @ToRole:PurchaseInternalNote
        */
        public $PurchaseInternalNotes;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Purchases_PurchaseStatus
        * @FromRole:Purchase
        * @ToRole:PurchaseStatu
        */
        public $PurchaseStatus;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Purchases_PurchaseTypes
        * @FromRole:Purchase
        * @ToRole:PurchaseType
        */
        public $PurchaseType;
    

       /**
        * Function to create an instance of Purchase
        * @param Edm.Int32 $PurchaseId
        * @param Edm.DateTime $DateCreated
        * @param Edm.Int32 $UserId
        */
        public static function CreatePurchase(
            $PurchaseId, 
            $DateCreated, 
            $UserId)
        {   
            $Purchase = new Purchase();
            $Purchase->PurchaseId = $PurchaseId;
            $Purchase->DateCreated = $DateCreated;
            $Purchase->UserId = $UserId;
            return $Purchase;
        }

       /**
        * Constructor for Purchase
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['AssignedUsers'] = 'Users';
            $this->_entityMap['PaymentTerm'] = 'PaymentTerm';
            $this->_entityMap['Supplier'] = 'Suppliers';
            $this->_entityMap['PurchaseDetails'] = 'PurchaseDetail';
            $this->_entityMap['PurchaseInternalNotes'] = 'PurchaseInternalNote';
            $this->_entityMap['PurchaseStatus'] = 'PurchaseStatu';
            $this->_entityMap['PurchaseType'] = 'PurchaseType';
            $this->_entityKey[] = 'PurchaseId';
            $this->AssignedUsers = array();
            $this->PaymentTerm = array();
            $this->Supplier = array();
            $this->PurchaseDetails = array();
            $this->PurchaseInternalNotes = array();
            $this->PurchaseStatus = array();
            $this->PurchaseType = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Supplier
    * @type:EntityType
    * @key:SupplierId
    */
    class Supplier extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $SupplierId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Name;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Address1;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Address2;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Address3;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Town;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $County;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:10
        * @FixedLength:false
        */
        public $Postcode;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Country;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:20
        * @FixedLength:false
        */
        public $TelNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:20
        * @FixedLength:false
        */
        public $FaxNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $ContactName;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:20
        * @FixedLength:false
        */
        public $ContactTel;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:20
        * @FixedLength:false
        */
        public $ContactFax;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $ContactEmail;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $WebAddress;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:20
        * @FixedLength:false
        */
        public $AccountNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $CreditAccount;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Notes;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $CreditLimit;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PaymentTermsId;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ITEMS_VENDORS
        * @FromRole:VENDOR
        * @ToRole:Items
        */
        public $Products;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_VENDORS_PaymentTerms
        * @FromRole:Suppliers
        * @ToRole:PaymentTerm
        */
        public $PaymentTerm;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Purchases_VENDORS
        * @FromRole:Suppliers
        * @ToRole:Purchase
        */
        public $Purchases;
    

       /**
        * Function to create an instance of Supplier
        * @param Edm.Int32 $SupplierId
        * @param Edm.String $Name
        */
        public static function CreateSupplier(
            $SupplierId, 
            $Name)
        {   
            $Supplier = new Supplier();
            $Supplier->SupplierId = $SupplierId;
            $Supplier->Name = $Name;
            return $Supplier;
        }

       /**
        * Constructor for Supplier
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Products'] = 'Items';
            $this->_entityMap['PaymentTerm'] = 'PaymentTerm';
            $this->_entityMap['Purchases'] = 'Purchase';
            $this->_entityKey[] = 'SupplierId';
            $this->Products = array();
            $this->PaymentTerm = array();
            $this->Purchases = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:PaymentTerm
    * @type:EntityType
    * @key:PaymentTermsId
    */
    class PaymentTerm extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PaymentTermsId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PaymentDays;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Purchases_PaymentTerms
        * @FromRole:PaymentTerm
        * @ToRole:Purchase
        */
        public $Purchases;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_VENDORS_PaymentTerms
        * @FromRole:PaymentTerm
        * @ToRole:Suppliers
        */
        public $Suppliers;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDERS_PaymentTerms
        * @FromRole:PaymentTerm
        * @ToRole:ORDER
        */
        public $Orders;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Customers_PaymentTerms
        * @FromRole:PaymentTerm
        * @ToRole:Customer
        */
        public $Customers;
    

       /**
        * Function to create an instance of PaymentTerm
        * @param Edm.Int32 $PaymentTermsId
        * @param Edm.String $Description
        * @param Edm.Int32 $PaymentDays
        */
        public static function CreatePaymentTerm(
            $PaymentTermsId, 
            $Description, 
            $PaymentDays)
        {   
            $PaymentTerm = new PaymentTerm();
            $PaymentTerm->PaymentTermsId = $PaymentTermsId;
            $PaymentTerm->Description = $Description;
            $PaymentTerm->PaymentDays = $PaymentDays;
            return $PaymentTerm;
        }

       /**
        * Constructor for PaymentTerm
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Purchases'] = 'Purchase';
            $this->_entityMap['Suppliers'] = 'Suppliers';
            $this->_entityMap['Orders'] = 'ORDER';
            $this->_entityMap['Customers'] = 'Customer';
            $this->_entityKey[] = 'PaymentTermsId';
            $this->Purchases = array();
            $this->Suppliers = array();
            $this->Orders = array();
            $this->Customers = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:PurchaseDetail
    * @type:EntityType
    * @key:PurchaseDetailsId
    */
    class PurchaseDetail extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PurchaseDetailsId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PurchaseId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $OurSku;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $OurOrderNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $SupplierSku;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $Qty;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $PriceEach;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $VatRate;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $VatId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Received;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_PurchaseDetails_Purchases
        * @FromRole:PurchaseDetail
        * @ToRole:Purchase
        */
        public $Purchase;
    

       /**
        * Function to create an instance of PurchaseDetail
        * @param Edm.Int32 $PurchaseDetailsId
        * @param Edm.String $Description
        */
        public static function CreatePurchaseDetail(
            $PurchaseDetailsId, 
            $Description)
        {   
            $PurchaseDetail = new PurchaseDetail();
            $PurchaseDetail->PurchaseDetailsId = $PurchaseDetailsId;
            $PurchaseDetail->Description = $Description;
            return $PurchaseDetail;
        }

       /**
        * Constructor for PurchaseDetail
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Purchase'] = 'Purchase';
            $this->_entityKey[] = 'PurchaseDetailsId';
            $this->Purchase = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:PurchaseInternalNote
    * @type:EntityType
    * @key:PurchaseInternalNotesId
    */
    class PurchaseInternalNote extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PurchaseInternalNotesId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Notes;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $UserId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.DateTime
        */
        public $DateAdded;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PurchaseId;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_PurchaseInternalNotes_Purchases
        * @FromRole:PurchaseInternalNote
        * @ToRole:Purchase
        */
        public $Purchase;
    

       /**
        * Function to create an instance of PurchaseInternalNote
        * @param Edm.Int32 $PurchaseInternalNotesId
        * @param Edm.String $Notes
        * @param Edm.Int32 $UserId
        * @param Edm.DateTime $DateAdded
        */
        public static function CreatePurchaseInternalNote(
            $PurchaseInternalNotesId, 
            $Notes, 
            $UserId, 
            $DateAdded)
        {   
            $PurchaseInternalNote = new PurchaseInternalNote();
            $PurchaseInternalNote->PurchaseInternalNotesId = $PurchaseInternalNotesId;
            $PurchaseInternalNote->Notes = $Notes;
            $PurchaseInternalNote->UserId = $UserId;
            $PurchaseInternalNote->DateAdded = $DateAdded;
            return $PurchaseInternalNote;
        }

       /**
        * Constructor for PurchaseInternalNote
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Purchase'] = 'Purchase';
            $this->_entityKey[] = 'PurchaseInternalNotesId';
            $this->Purchase = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:PurchaseStatus
    * @type:EntityType
    * @key:PurchaseStatusId
    */
    class PurchaseStatus extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PurchaseStatusId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ItemOrder;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Purchases_PurchaseStatus
        * @FromRole:PurchaseStatu
        * @ToRole:Purchase
        */
        public $Purchases;
    

       /**
        * Function to create an instance of PurchaseStatus
        * @param Edm.Int32 $PurchaseStatusId
        * @param Edm.String $Description
        * @param Edm.Int32 $ItemOrder
        */
        public static function CreatePurchaseStatus(
            $PurchaseStatusId, 
            $Description, 
            $ItemOrder)
        {   
            $PurchaseStatus = new PurchaseStatus();
            $PurchaseStatus->PurchaseStatusId = $PurchaseStatusId;
            $PurchaseStatus->Description = $Description;
            $PurchaseStatus->ItemOrder = $ItemOrder;
            return $PurchaseStatus;
        }

       /**
        * Constructor for PurchaseStatus
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Purchases'] = 'Purchase';
            $this->_entityKey[] = 'PurchaseStatusId';
            $this->Purchases = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:PurchaseType
    * @type:EntityType
    * @key:PurchaseTypeId
    */
    class PurchaseType extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PurchaseTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PurchaseTypeCode;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Purchases_PurchaseTypes
        * @FromRole:PurchaseType
        * @ToRole:Purchase
        */
        public $Purchases;
    

       /**
        * Function to create an instance of PurchaseType
        * @param Edm.Int32 $PurchaseTypeId
        * @param Edm.String $Description
        * @param Edm.Int32 $PurchaseTypeCode
        */
        public static function CreatePurchaseType(
            $PurchaseTypeId, 
            $Description, 
            $PurchaseTypeCode)
        {   
            $PurchaseType = new PurchaseType();
            $PurchaseType->PurchaseTypeId = $PurchaseTypeId;
            $PurchaseType->Description = $Description;
            $PurchaseType->PurchaseTypeCode = $PurchaseTypeCode;
            return $PurchaseType;
        }

       /**
        * Constructor for PurchaseType
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Purchases'] = 'Purchase';
            $this->_entityKey[] = 'PurchaseTypeId';
            $this->Purchases = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ProductInfo
    * @type:EntityType
    * @key:ProductInfoId
    */
    class ProductInfo extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ProductInfoId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $SKU;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ProductInfo_ITEMS
        * @FromRole:ProductInfo
        * @ToRole:Products
        */
        public $Product;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ProductInfoImages_ProductInfo1
        * @FromRole:ProductInfo
        * @ToRole:ProductInfoImage
        */
        public $ProductInfoImages;
    

       /**
        * Function to create an instance of ProductInfo
        * @param Edm.Int32 $ProductInfoId
        * @param Edm.Int32 $SKU
        */
        public static function CreateProductInfo(
            $ProductInfoId, 
            $SKU)
        {   
            $ProductInfo = new ProductInfo();
            $ProductInfo->ProductInfoId = $ProductInfoId;
            $ProductInfo->SKU = $SKU;
            return $ProductInfo;
        }

       /**
        * Constructor for ProductInfo
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Product'] = 'Products';
            $this->_entityMap['ProductInfoImages'] = 'ProductInfoImage';
            $this->_entityKey[] = 'ProductInfoId';
            $this->Product = array();
            $this->ProductInfoImages = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ProductLocation
    * @type:EntityType
    * @key:LocationId
    */
    class ProductLocation extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $LocationId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ITEMS_ProductLocations
        * @FromRole:ProductLocation
        * @ToRole:Products
        */
        public $Products;
    

       /**
        * Function to create an instance of ProductLocation
        * @param Edm.Int32 $LocationId
        * @param Edm.String $Description
        */
        public static function CreateProductLocation(
            $LocationId, 
            $Description)
        {   
            $ProductLocation = new ProductLocation();
            $ProductLocation->LocationId = $LocationId;
            $ProductLocation->Description = $Description;
            return $ProductLocation;
        }

       /**
        * Constructor for ProductLocation
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Products'] = 'Products';
            $this->_entityKey[] = 'LocationId';
            $this->Products = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ProductsAllocatedToOrder
    * @type:EntityType
    * @key:OrderDetailsId
    * @key:Sku
    */
    class ProductsAllocatedToOrder extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $Sku;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $OrderDetailsId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $QtyAllocated;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ProductsAllocatedToOrders_ITEMS
        * @FromRole:ProductsAllocatedToOrder
        * @ToRole:Products
        */
        public $Product;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ProductsAllocatedToOrders_ORDER_ELEMENTS1
        * @FromRole:ProductsAllocatedToOrder
        * @ToRole:ORDER_ELEMENTS
        */
        public $OrderDetails;
    

       /**
        * Function to create an instance of ProductsAllocatedToOrder
        * @param Edm.Int32 $Sku
        * @param Edm.Int32 $OrderDetailsId
        * @param Edm.Int32 $QtyAllocated
        */
        public static function CreateProductsAllocatedToOrder(
            $Sku, 
            $OrderDetailsId, 
            $QtyAllocated)
        {   
            $ProductsAllocatedToOrder = new ProductsAllocatedToOrder();
            $ProductsAllocatedToOrder->Sku = $Sku;
            $ProductsAllocatedToOrder->OrderDetailsId = $OrderDetailsId;
            $ProductsAllocatedToOrder->QtyAllocated = $QtyAllocated;
            return $ProductsAllocatedToOrder;
        }

       /**
        * Constructor for ProductsAllocatedToOrder
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Product'] = 'Products';
            $this->_entityMap['OrderDetails'] = 'ORDER_ELEMENTS';
            $this->_entityKey[] = 'OrderDetailsId';
            $this->_entityKey[] = 'Sku';
            $this->Product = array();
            $this->OrderDetails = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:TaxRate
    * @type:EntityType
    * @key:TaxId
    */
    class TaxRate extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TaxId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:3
        * @FixedLength:true
        */
        public $Code;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Double
        */
        public $Rate;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Boolean
        */
        public $IsDefaultTaxCode;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:20
        * @FixedLength:false
        */
        public $TaxDescription;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ITEMS_TaxRates
        * @FromRole:TaxRate
        * @ToRole:Products
        */
        public $Products;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDER_ELEMENTS_TaxRates1
        * @FromRole:TaxRate
        * @ToRole:ORDER_ELEMENTS
        */
        public $OrderDetails;
    

       /**
        * Function to create an instance of TaxRate
        * @param Edm.Int32 $TaxId
        * @param Edm.String $Code
        * @param Edm.Double $Rate
        * @param Edm.Boolean $IsDefaultTaxCode
        */
        public static function CreateTaxRate(
            $TaxId, 
            $Code, 
            $Rate, 
            $IsDefaultTaxCode)
        {   
            $TaxRate = new TaxRate();
            $TaxRate->TaxId = $TaxId;
            $TaxRate->Code = $Code;
            $TaxRate->Rate = $Rate;
            $TaxRate->IsDefaultTaxCode = $IsDefaultTaxCode;
            return $TaxRate;
        }

       /**
        * Constructor for TaxRate
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Products'] = 'Products';
            $this->_entityMap['OrderDetails'] = 'ORDER_ELEMENTS';
            $this->_entityKey[] = 'TaxId';
            $this->Products = array();
            $this->OrderDetails = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:OrderStatus
    * @type:EntityType
    * @key:OrderStatusId
    */
    class OrderStatus extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $OrderStatusId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $OrderStatusTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Boolean
        */
        public $System;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Boolean
        */
        public $DefaultType;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDER_STATUS_LOOKUP_OrderStatusTypeLookup
        * @FromRole:ORDER_STATUS_LOOKUP
        * @ToRole:OrderStatusTypeLookup
        */
        public $OrderStatusType;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDERS_ORDER_STATUS_LOOKUP
        * @FromRole:ORDER_STATUS_LOOKUP
        * @ToRole:ORDER
        */
        public $Orders;
    

       /**
        * Function to create an instance of OrderStatus
        * @param Edm.Int32 $OrderStatusId
        * @param Edm.String $Description
        * @param Edm.Int32 $OrderStatusTypeId
        * @param Edm.Boolean $System
        * @param Edm.Boolean $DefaultType
        */
        public static function CreateOrderStatus(
            $OrderStatusId, 
            $Description, 
            $OrderStatusTypeId, 
            $System, 
            $DefaultType)
        {   
            $OrderStatus = new OrderStatus();
            $OrderStatus->OrderStatusId = $OrderStatusId;
            $OrderStatus->Description = $Description;
            $OrderStatus->OrderStatusTypeId = $OrderStatusTypeId;
            $OrderStatus->System = $System;
            $OrderStatus->DefaultType = $DefaultType;
            return $OrderStatus;
        }

       /**
        * Constructor for OrderStatus
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['OrderStatusType'] = 'OrderStatusTypeLookup';
            $this->_entityMap['Orders'] = 'ORDER';
            $this->_entityKey[] = 'OrderStatusId';
            $this->OrderStatusType = array();
            $this->Orders = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:OrderDetailStatus
    * @type:EntityType
    * @key:OrderDetailStatusId
    */
    class OrderDetailStatus extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $OrderDetailStatusId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ItemOrder;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDER_ELEMENTS_OrderElementsStatusLookup1
        * @FromRole:OrderDetailStatus
        * @ToRole:ORDER_ELEMENTS
        */
        public $OrderDetails;
    

       /**
        * Function to create an instance of OrderDetailStatus
        * @param Edm.Int32 $OrderDetailStatusId
        */
        public static function CreateOrderDetailStatus(
            $OrderDetailStatusId)
        {   
            $OrderDetailStatus = new OrderDetailStatus();
            $OrderDetailStatus->OrderDetailStatusId = $OrderDetailStatusId;
            return $OrderDetailStatus;
        }

       /**
        * Constructor for OrderDetailStatus
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['OrderDetails'] = 'ORDER_ELEMENTS';
            $this->_entityKey[] = 'OrderDetailStatusId';
            $this->OrderDetails = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Order
    * @type:EntityType
    * @key:OrderNo
    */
    class Order extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $OrderNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $CustomerId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DatePlaced;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $StatusId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Paid;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $CustomerRef;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Invoiced;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DateInvoiced;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Comments;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DateOrdered;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DatePaid;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $PrivateComments;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DueDate;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DueTime;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Scheduled;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $Duration;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $Priority;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Recurring;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $RecurrTimePeriod;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $RaisedBy;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $UseTradeMargins;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $InterestFreeCredit;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $AssignedTo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DueDate2;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DueTime2;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $DueDuration2;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $OrderTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $LastModified;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PaymentTermsId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $ExtOrderNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $NetTotal;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $GrossTotal;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $TaxTotal;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $TaxCalculationMethod;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $CurrencyCountryId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $ExchangeRate;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PriceBandId;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDERS_ORDER_STATUS_LOOKUP
        * @FromRole:ORDER
        * @ToRole:ORDER_STATUS_LOOKUP
        */
        public $OrderStatus;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDERS_OrderTypes
        * @FromRole:ORDER
        * @ToRole:OrderType
        */
        public $OrderType;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDERS_PaymentTerms
        * @FromRole:ORDER
        * @ToRole:PaymentTerm
        */
        public $PaymentTerm;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDERS_Users
        * @FromRole:Order
        * @ToRole:Users
        */
        public $RaisedByUser;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDERS_CUSTOMERS
        * @FromRole:Order
        * @ToRole:Customer
        */
        public $Customer;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_JobHours_ORDERS
        * @FromRole:Order
        * @ToRole:JobHour
        */
        public $JobHours;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:JobAssignments
        * @FromRole:Order
        * @ToRole:User
        */
        public $AssignedUsers;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDER_ELEMENTS_ORDERS1
        * @FromRole:Order
        * @ToRole:ORDER_ELEMENTS
        */
        public $OrderDetails;
    

       /**
        * Function to create an instance of Order
        * @param Edm.Int32 $OrderNo
        */
        public static function CreateOrder(
            $OrderNo)
        {   
            $Order = new Order();
            $Order->OrderNo = $OrderNo;
            return $Order;
        }

       /**
        * Constructor for Order
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['OrderStatus'] = 'ORDER_STATUS_LOOKUP';
            $this->_entityMap['OrderType'] = 'OrderType';
            $this->_entityMap['PaymentTerm'] = 'PaymentTerm';
            $this->_entityMap['RaisedByUser'] = 'Users';
            $this->_entityMap['Customer'] = 'Customer';
            $this->_entityMap['JobHours'] = 'JobHour';
            $this->_entityMap['AssignedUsers'] = 'User';
            $this->_entityMap['OrderDetails'] = 'ORDER_ELEMENTS';
            $this->_entityKey[] = 'OrderNo';
            $this->OrderStatus = array();
            $this->OrderType = array();
            $this->PaymentTerm = array();
            $this->RaisedByUser = array();
            $this->Customer = array();
            $this->JobHours = array();
            $this->AssignedUsers = array();
            $this->OrderDetails = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:OrderStatusType
    * @type:EntityType
    * @key:OrderStatusTypeId
    */
    class OrderStatusType extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $OrderStatusTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDER_STATUS_LOOKUP_OrderStatusTypeLookup
        * @FromRole:OrderStatusTypeLookup
        * @ToRole:ORDER_STATUS_LOOKUP
        */
        public $OrderStatuses;
    

       /**
        * Function to create an instance of OrderStatusType
        * @param Edm.Int32 $OrderStatusTypeId
        * @param Edm.String $Description
        */
        public static function CreateOrderStatusType(
            $OrderStatusTypeId, 
            $Description)
        {   
            $OrderStatusType = new OrderStatusType();
            $OrderStatusType->OrderStatusTypeId = $OrderStatusTypeId;
            $OrderStatusType->Description = $Description;
            return $OrderStatusType;
        }

       /**
        * Constructor for OrderStatusType
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['OrderStatuses'] = 'ORDER_STATUS_LOOKUP';
            $this->_entityKey[] = 'OrderStatusTypeId';
            $this->OrderStatuses = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:OrderType
    * @type:EntityType
    * @key:OrderTypeId
    */
    class OrderType extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $OrderTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDERS_OrderTypes
        * @FromRole:OrderType
        * @ToRole:ORDER
        */
        public $Orders;
    

       /**
        * Function to create an instance of OrderType
        * @param Edm.Int32 $OrderTypeId
        * @param Edm.String $Description
        */
        public static function CreateOrderType(
            $OrderTypeId, 
            $Description)
        {   
            $OrderType = new OrderType();
            $OrderType->OrderTypeId = $OrderTypeId;
            $OrderType->Description = $Description;
            return $OrderType;
        }

       /**
        * Constructor for OrderType
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Orders'] = 'ORDER';
            $this->_entityKey[] = 'OrderTypeId';
            $this->Orders = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:DataType
    * @type:EntityType
    * @key:DataTypeId
    */
    class DataType extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $DataTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DataTypeName;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportElements_DataTypes
        * @FromRole:DataType
        * @ToRole:ReportElement
        */
        public $ReportElements;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportFormatStrings_DataTypes
        * @FromRole:DataType
        * @ToRole:ReportFormatString
        */
        public $ReportFormatStrings;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportMergeFields_DataTypes
        * @FromRole:DataType
        * @ToRole:ReportMergeField
        */
        public $ReportMergeFields;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ListViewColumns_DataTypes
        * @FromRole:DataType
        * @ToRole:ListViewColumn
        */
        public $ListViewColumns;
    

       /**
        * Function to create an instance of DataType
        * @param Edm.Int32 $DataTypeId
        * @param Edm.String $DataTypeName
        */
        public static function CreateDataType(
            $DataTypeId, 
            $DataTypeName)
        {   
            $DataType = new DataType();
            $DataType->DataTypeId = $DataTypeId;
            $DataType->DataTypeName = $DataTypeName;
            return $DataType;
        }

       /**
        * Constructor for DataType
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['ReportElements'] = 'ReportElement';
            $this->_entityMap['ReportFormatStrings'] = 'ReportFormatString';
            $this->_entityMap['ReportMergeFields'] = 'ReportMergeField';
            $this->_entityMap['ListViewColumns'] = 'ListViewColumn';
            $this->_entityKey[] = 'DataTypeId';
            $this->ReportElements = array();
            $this->ReportFormatStrings = array();
            $this->ReportMergeFields = array();
            $this->ListViewColumns = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ReportElement
    * @type:EntityType
    * @key:ReportElementId
    */
    class ReportElement extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ReportElementId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ReportSectionId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Name;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Left;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Top;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Width;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Height;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Binary
        */
        public $Image;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Text;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Bold;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Italic;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Underline;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $FontName;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $FontSize;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $FontColour;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $BackColour;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $Justify;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ZOrder;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $MergeFieldName;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ReportElementTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $FormatString;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $IsBarcode;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $DataTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ReportTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $CanGrow;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $LeftBorderSize;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $LeftBorderStyle;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $LeftBorderColour;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $TopBorderSize;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $TopBorderStyle;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $TopBorderColour;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $RightBorderSize;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $RightBorderStyle;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $RightBorderColour;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $BottomBorderSize;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $BottomBorderStyle;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $BottomBorderColour;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $BorderRadius;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $ValueFormula;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $HideFormula;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportElements_DataTypes
        * @FromRole:ReportElement
        * @ToRole:DataType
        */
        public $DataType;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportElements_ReportElementTypes
        * @FromRole:ReportElement
        * @ToRole:ReportElementType
        */
        public $ReportElementType;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportElements_ReportSections
        * @FromRole:ReportElement
        * @ToRole:ReportSection
        */
        public $ReportSection;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportElements_ReportTypes
        * @FromRole:ReportElement
        * @ToRole:ReportType
        */
        public $ReportType;
    

       /**
        * Function to create an instance of ReportElement
        * @param Edm.Int32 $ReportElementId
        */
        public static function CreateReportElement(
            $ReportElementId)
        {   
            $ReportElement = new ReportElement();
            $ReportElement->ReportElementId = $ReportElementId;
            return $ReportElement;
        }

       /**
        * Constructor for ReportElement
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['DataType'] = 'DataType';
            $this->_entityMap['ReportElementType'] = 'ReportElementType';
            $this->_entityMap['ReportSection'] = 'ReportSection';
            $this->_entityMap['ReportType'] = 'ReportType';
            $this->_entityKey[] = 'ReportElementId';
            $this->DataType = array();
            $this->ReportElementType = array();
            $this->ReportSection = array();
            $this->ReportType = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ReportElementType
    * @type:EntityType
    * @key:ReportElementTypeId
    */
    class ReportElementType extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ReportElementTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportElements_ReportElementTypes
        * @FromRole:ReportElementType
        * @ToRole:ReportElement
        */
        public $ReportElements;
    

       /**
        * Function to create an instance of ReportElementType
        * @param Edm.Int32 $ReportElementTypeId
        */
        public static function CreateReportElementType(
            $ReportElementTypeId)
        {   
            $ReportElementType = new ReportElementType();
            $ReportElementType->ReportElementTypeId = $ReportElementTypeId;
            return $ReportElementType;
        }

       /**
        * Constructor for ReportElementType
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['ReportElements'] = 'ReportElement';
            $this->_entityKey[] = 'ReportElementTypeId';
            $this->ReportElements = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ReportFormatString
    * @type:EntityType
    * @key:FormatStringId
    */
    class ReportFormatString extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $FormatStringId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $FormatString;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $DataTypeId;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportFormatStrings_DataTypes
        * @FromRole:ReportFormatString
        * @ToRole:DataType
        */
        public $DataType;
    

       /**
        * Function to create an instance of ReportFormatString
        * @param Edm.Int32 $FormatStringId
        */
        public static function CreateReportFormatString(
            $FormatStringId)
        {   
            $ReportFormatString = new ReportFormatString();
            $ReportFormatString->FormatStringId = $FormatStringId;
            return $ReportFormatString;
        }

       /**
        * Constructor for ReportFormatString
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['DataType'] = 'DataType';
            $this->_entityKey[] = 'FormatStringId';
            $this->DataType = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ReportMergeField
    * @type:EntityType
    * @key:ReportMergeFieldId
    */
    class ReportMergeField extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ReportMergeFieldId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ReportTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $FieldName;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $DataTypeId;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportMergeFields_DataTypes
        * @FromRole:ReportMergeField
        * @ToRole:DataType
        */
        public $DataType;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportMergeFields_ReportTypes
        * @FromRole:ReportMergeField
        * @ToRole:ReportType
        */
        public $ReportType;
    

       /**
        * Function to create an instance of ReportMergeField
        * @param Edm.Int32 $ReportMergeFieldId
        */
        public static function CreateReportMergeField(
            $ReportMergeFieldId)
        {   
            $ReportMergeField = new ReportMergeField();
            $ReportMergeField->ReportMergeFieldId = $ReportMergeFieldId;
            return $ReportMergeField;
        }

       /**
        * Constructor for ReportMergeField
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['DataType'] = 'DataType';
            $this->_entityMap['ReportType'] = 'ReportType';
            $this->_entityKey[] = 'ReportMergeFieldId';
            $this->DataType = array();
            $this->ReportType = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Report
    * @type:EntityType
    * @key:ReportId
    */
    class Report extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ReportId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $ReportDescription;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ReportTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $DefaultPrinterName;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $PageWidth;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $PageHeight;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $LeftMargin;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $RightMargin;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $TopMargin;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $BottomMargin;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Landscape;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Version;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Reports_ReportTypes
        * @FromRole:Report
        * @ToRole:ReportType
        */
        public $ReportType;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportsComputersPrinters_Reports
        * @FromRole:Report
        * @ToRole:ReportsComputersPrinter
        */
        public $ReportsComputersPrinters;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportSections_Reports
        * @FromRole:Report
        * @ToRole:ReportSection
        */
        public $ReportSections;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportsMenus_Reports
        * @FromRole:Report
        * @ToRole:ReportsMenu
        */
        public $ReportsMenus;
    

       /**
        * Function to create an instance of Report
        * @param Edm.Int32 $ReportId
        */
        public static function CreateReport(
            $ReportId)
        {   
            $Report = new Report();
            $Report->ReportId = $ReportId;
            return $Report;
        }

       /**
        * Constructor for Report
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['ReportType'] = 'ReportType';
            $this->_entityMap['ReportsComputersPrinters'] = 'ReportsComputersPrinter';
            $this->_entityMap['ReportSections'] = 'ReportSection';
            $this->_entityMap['ReportsMenus'] = 'ReportsMenu';
            $this->_entityKey[] = 'ReportId';
            $this->ReportType = array();
            $this->ReportsComputersPrinters = array();
            $this->ReportSections = array();
            $this->ReportsMenus = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ReportsComputersPrinter
    * @type:EntityType
    * @key:ReportsComputersPrintersId
    */
    class ReportsComputersPrinter extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ReportsComputersPrintersId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ReportId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ComputerId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $PrinterName;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportsComputersPrinters_Reports
        * @FromRole:ReportsComputersPrinter
        * @ToRole:Report
        */
        public $Report;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportsComputersPrinters_Computers
        * @FromRole:ReportsComputersPrinter
        * @ToRole:Computer
        */
        public $Computer;
    

       /**
        * Function to create an instance of ReportsComputersPrinter
        * @param Edm.Int32 $ReportsComputersPrintersId
        */
        public static function CreateReportsComputersPrinter(
            $ReportsComputersPrintersId)
        {   
            $ReportsComputersPrinter = new ReportsComputersPrinter();
            $ReportsComputersPrinter->ReportsComputersPrintersId = $ReportsComputersPrintersId;
            return $ReportsComputersPrinter;
        }

       /**
        * Constructor for ReportsComputersPrinter
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Report'] = 'Report';
            $this->_entityMap['Computer'] = 'Computer';
            $this->_entityKey[] = 'ReportsComputersPrintersId';
            $this->Report = array();
            $this->Computer = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ReportSection
    * @type:EntityType
    * @key:ReportSectionId
    */
    class ReportSection extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ReportSectionId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ReportSectionTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ReportId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Height;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $TemplateSection;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Visible;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $HideifBlank;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SortOrder;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportElements_ReportSections
        * @FromRole:ReportSection
        * @ToRole:ReportElement
        */
        public $ReportElements;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportSections_Reports
        * @FromRole:ReportSection
        * @ToRole:Report
        */
        public $Report;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportSections_ReportSectionTypes
        * @FromRole:ReportSection
        * @ToRole:ReportSectionType
        */
        public $ReportSectionType;
    

       /**
        * Function to create an instance of ReportSection
        * @param Edm.Int32 $ReportSectionId
        */
        public static function CreateReportSection(
            $ReportSectionId)
        {   
            $ReportSection = new ReportSection();
            $ReportSection->ReportSectionId = $ReportSectionId;
            return $ReportSection;
        }

       /**
        * Constructor for ReportSection
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['ReportElements'] = 'ReportElement';
            $this->_entityMap['Report'] = 'Report';
            $this->_entityMap['ReportSectionType'] = 'ReportSectionType';
            $this->_entityKey[] = 'ReportSectionId';
            $this->ReportElements = array();
            $this->Report = array();
            $this->ReportSectionType = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ReportSectionType
    * @type:EntityType
    * @key:ReportSectionTypeId
    */
    class ReportSectionType extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ReportSectionTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportSections_ReportSectionTypes
        * @FromRole:ReportSectionType
        * @ToRole:ReportSection
        */
        public $ReportSections;
    

       /**
        * Function to create an instance of ReportSectionType
        * @param Edm.Int32 $ReportSectionTypeId
        * @param Edm.String $Description
        */
        public static function CreateReportSectionType(
            $ReportSectionTypeId, 
            $Description)
        {   
            $ReportSectionType = new ReportSectionType();
            $ReportSectionType->ReportSectionTypeId = $ReportSectionTypeId;
            $ReportSectionType->Description = $Description;
            return $ReportSectionType;
        }

       /**
        * Constructor for ReportSectionType
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['ReportSections'] = 'ReportSection';
            $this->_entityKey[] = 'ReportSectionTypeId';
            $this->ReportSections = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ReportsMenu
    * @type:EntityType
    * @key:MenuId
    * @key:ReportId
    */
    class ReportsMenu extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ReportId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $MenuId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SortOrder;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $DividerAfter;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $DividerBefore;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $FlyOutMenu;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PrintQty;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $PromptForQty;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $PreviewBeforePrint;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $PrePrintFormula;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportsMenus_Reports
        * @FromRole:ReportsMenu
        * @ToRole:Report
        */
        public $Report;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportsMenus_Menus
        * @FromRole:ReportsMenu
        * @ToRole:Menu
        */
        public $Menu;
    

       /**
        * Function to create an instance of ReportsMenu
        * @param Edm.Int32 $ReportId
        * @param Edm.Int32 $MenuId
        */
        public static function CreateReportsMenu(
            $ReportId, 
            $MenuId)
        {   
            $ReportsMenu = new ReportsMenu();
            $ReportsMenu->ReportId = $ReportId;
            $ReportsMenu->MenuId = $MenuId;
            return $ReportsMenu;
        }

       /**
        * Constructor for ReportsMenu
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Report'] = 'Report';
            $this->_entityMap['Menu'] = 'Menu';
            $this->_entityKey[] = 'MenuId';
            $this->_entityKey[] = 'ReportId';
            $this->Report = array();
            $this->Menu = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ReportType
    * @type:EntityType
    * @key:ReportTypeId
    */
    class ReportType extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ReportTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $ReportTypeDescription;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportElements_ReportTypes
        * @FromRole:ReportType
        * @ToRole:ReportElement
        */
        public $ReportElements;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportMergeFields_ReportTypes
        * @FromRole:ReportType
        * @ToRole:ReportMergeField
        */
        public $ReportMergeFields;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Reports_ReportTypes
        * @FromRole:ReportType
        * @ToRole:Report
        */
        public $Reports;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:ReportTypesMenus
        * @FromRole:ReportType
        * @ToRole:Menu
        */
        public $Menus;
    

       /**
        * Function to create an instance of ReportType
        * @param Edm.Int32 $ReportTypeId
        */
        public static function CreateReportType(
            $ReportTypeId)
        {   
            $ReportType = new ReportType();
            $ReportType->ReportTypeId = $ReportTypeId;
            return $ReportType;
        }

       /**
        * Constructor for ReportType
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['ReportElements'] = 'ReportElement';
            $this->_entityMap['ReportMergeFields'] = 'ReportMergeField';
            $this->_entityMap['Reports'] = 'Report';
            $this->_entityMap['Menus'] = 'Menu';
            $this->_entityKey[] = 'ReportTypeId';
            $this->ReportElements = array();
            $this->ReportMergeFields = array();
            $this->Reports = array();
            $this->Menus = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ListViewColumn
    * @type:EntityType
    * @key:ListViewColumnId
    */
    class ListViewColumn extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ListViewColumnId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Text;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TextAlignId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $DataTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Name;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ListViewId;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ListViewColumns_DataTypes
        * @FromRole:ListViewColumn
        * @ToRole:DataType
        */
        public $DataType;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ListViewColumns_ListViews
        * @FromRole:ListViewColumn
        * @ToRole:ListView
        */
        public $ListView;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ListViewUsersColumns_ListViewColumns
        * @FromRole:ListViewColumn
        * @ToRole:ListViewUsersColumn
        */
        public $ListViewUsersColumns;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ListViewColumns_TextAlignTypes
        * @FromRole:ListViewColumn
        * @ToRole:TextAlignType
        */
        public $TextAlignType;
    

       /**
        * Function to create an instance of ListViewColumn
        * @param Edm.Int32 $ListViewColumnId
        * @param Edm.String $Text
        * @param Edm.Int32 $TextAlignId
        * @param Edm.Int32 $DataTypeId
        * @param Edm.String $Name
        */
        public static function CreateListViewColumn(
            $ListViewColumnId, 
            $Text, 
            $TextAlignId, 
            $DataTypeId, 
            $Name)
        {   
            $ListViewColumn = new ListViewColumn();
            $ListViewColumn->ListViewColumnId = $ListViewColumnId;
            $ListViewColumn->Text = $Text;
            $ListViewColumn->TextAlignId = $TextAlignId;
            $ListViewColumn->DataTypeId = $DataTypeId;
            $ListViewColumn->Name = $Name;
            return $ListViewColumn;
        }

       /**
        * Constructor for ListViewColumn
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['DataType'] = 'DataType';
            $this->_entityMap['ListView'] = 'ListView';
            $this->_entityMap['ListViewUsersColumns'] = 'ListViewUsersColumn';
            $this->_entityMap['TextAlignType'] = 'TextAlignType';
            $this->_entityKey[] = 'ListViewColumnId';
            $this->DataType = array();
            $this->ListView = array();
            $this->ListViewUsersColumns = array();
            $this->TextAlignType = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ListView
    * @type:EntityType
    * @key:ListViewId
    */
    class ListView extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ListViewId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ListViewColumns_ListViews
        * @FromRole:ListView
        * @ToRole:ListViewColumn
        */
        public $ListViewColumns;
    

       /**
        * Function to create an instance of ListView
        * @param Edm.Int32 $ListViewId
        * @param Edm.String $Description
        */
        public static function CreateListView(
            $ListViewId, 
            $Description)
        {   
            $ListView = new ListView();
            $ListView->ListViewId = $ListViewId;
            $ListView->Description = $Description;
            return $ListView;
        }

       /**
        * Constructor for ListView
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['ListViewColumns'] = 'ListViewColumn';
            $this->_entityKey[] = 'ListViewId';
            $this->ListViewColumns = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ListViewUsersColumn
    * @type:EntityType
    * @key:ColumnId
    * @key:UserId
    */
    class ListViewUsersColumn extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $UserId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ColumnId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Boolean
        */
        public $ColumnVisible;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ColumnOrder;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ColumnWidth;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ListViewUsersColumns_ListViewColumns
        * @FromRole:ListViewUsersColumn
        * @ToRole:ListViewColumn
        */
        public $ListViewColumn;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ListViewUsersColumns_Users
        * @FromRole:ListViewUsersColumn
        * @ToRole:User
        */
        public $User;
    

       /**
        * Function to create an instance of ListViewUsersColumn
        * @param Edm.Int32 $UserId
        * @param Edm.Int32 $ColumnId
        * @param Edm.Boolean $ColumnVisible
        * @param Edm.Int32 $ColumnOrder
        * @param Edm.Int32 $ColumnWidth
        */
        public static function CreateListViewUsersColumn(
            $UserId, 
            $ColumnId, 
            $ColumnVisible, 
            $ColumnOrder, 
            $ColumnWidth)
        {   
            $ListViewUsersColumn = new ListViewUsersColumn();
            $ListViewUsersColumn->UserId = $UserId;
            $ListViewUsersColumn->ColumnId = $ColumnId;
            $ListViewUsersColumn->ColumnVisible = $ColumnVisible;
            $ListViewUsersColumn->ColumnOrder = $ColumnOrder;
            $ListViewUsersColumn->ColumnWidth = $ColumnWidth;
            return $ListViewUsersColumn;
        }

       /**
        * Constructor for ListViewUsersColumn
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['ListViewColumn'] = 'ListViewColumn';
            $this->_entityMap['User'] = 'User';
            $this->_entityKey[] = 'ColumnId';
            $this->_entityKey[] = 'UserId';
            $this->ListViewColumn = array();
            $this->User = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:CustomerRelationship
    * @type:EntityType
    * @key:CustomerRelationshipId
    */
    class CustomerRelationship extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $CustomerRelationshipId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Customers_CustomerRelationships
        * @FromRole:CustomerRelationship
        * @ToRole:Customer
        */
        public $Customers;
    

       /**
        * Function to create an instance of CustomerRelationship
        * @param Edm.Int32 $CustomerRelationshipId
        */
        public static function CreateCustomerRelationship(
            $CustomerRelationshipId)
        {   
            $CustomerRelationship = new CustomerRelationship();
            $CustomerRelationship->CustomerRelationshipId = $CustomerRelationshipId;
            return $CustomerRelationship;
        }

       /**
        * Constructor for CustomerRelationship
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Customers'] = 'Customer';
            $this->_entityKey[] = 'CustomerRelationshipId';
            $this->Customers = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Customer
    * @type:EntityType
    * @key:CustomerId
    */
    class Customer extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $CustomerId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $CustomerNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Title;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $FirstName;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Surname;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Address1;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Address2;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Address3;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Town;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $County;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Postcode;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Country;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $WorkTel;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $HomeTel;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $MobileTel;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $OtherTel;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Fax;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Email;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Notes;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $SubscribeToNewsletter;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $JobTitle;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Department;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Company;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DelAddress1;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DelAddress2;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DelAddress3;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DelTown;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DelCounty;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DelPostcode;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DelTitle;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DelFirstname;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DelSurname;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DelJobTitle;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DelDepartment;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DelCompany;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DelTelephone;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DelEmail;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Active;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $DefaultPaymentTerms;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $TradeAccount;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $CreditLimit;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $CustomerRelationshipId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $CustomerTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $DelCountry;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $ExtCustomerId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $x_CONTACT_NAME;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $x_CONTACT_FAX;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $x_HISTORY;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $x_PAYMENT_TERMS;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $x_WEB_ADDRESS;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $x_CUSTOMER_NAME;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Customers_CustomerRelationships
        * @FromRole:Customer
        * @ToRole:CustomerRelationship
        */
        public $CustomerRelationship;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Customers_CustomerTypes
        * @FromRole:Customer
        * @ToRole:CustomerType
        */
        public $CustomerType;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Customers_PaymentTerms
        * @FromRole:Customer
        * @ToRole:PaymentTerm
        */
        public $PaymentTerm;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDERS_CUSTOMERS
        * @FromRole:Customer
        * @ToRole:Order
        */
        public $Orders;
    

       /**
        * Function to create an instance of Customer
        * @param Edm.Int32 $CustomerId
        */
        public static function CreateCustomer(
            $CustomerId)
        {   
            $Customer = new Customer();
            $Customer->CustomerId = $CustomerId;
            return $Customer;
        }

       /**
        * Constructor for Customer
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['CustomerRelationship'] = 'CustomerRelationship';
            $this->_entityMap['CustomerType'] = 'CustomerType';
            $this->_entityMap['PaymentTerm'] = 'PaymentTerm';
            $this->_entityMap['Orders'] = 'Order';
            $this->_entityKey[] = 'CustomerId';
            $this->CustomerRelationship = array();
            $this->CustomerType = array();
            $this->PaymentTerm = array();
            $this->Orders = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:CustomerType
    * @type:EntityType
    * @key:CustomerTypeId
    */
    class CustomerType extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $CustomerTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Customers_CustomerTypes
        * @FromRole:CustomerType
        * @ToRole:Customer
        */
        public $Customers;
    

       /**
        * Function to create an instance of CustomerType
        * @param Edm.Int32 $CustomerTypeId
        */
        public static function CreateCustomerType(
            $CustomerTypeId)
        {   
            $CustomerType = new CustomerType();
            $CustomerType->CustomerTypeId = $CustomerTypeId;
            return $CustomerType;
        }

       /**
        * Constructor for CustomerType
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Customers'] = 'Customer';
            $this->_entityKey[] = 'CustomerTypeId';
            $this->Customers = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:PaymentAccountAccountantType
    * @type:EntityType
    * @key:AccountAccountantTypeId
    */
    class PaymentAccountAccountantType extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $AccountAccountantTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_PaymentAccountHumanTypes_PaymentAccountAccountantTypes
        * @FromRole:PaymentAccountAccountantType
        * @ToRole:PaymentAccountHumanType
        */
        public $PaymentAccountHumanTypes;
    

       /**
        * Function to create an instance of PaymentAccountAccountantType
        * @param Edm.Int32 $AccountAccountantTypeId
        * @param Edm.String $Description
        */
        public static function CreatePaymentAccountAccountantType(
            $AccountAccountantTypeId, 
            $Description)
        {   
            $PaymentAccountAccountantType = new PaymentAccountAccountantType();
            $PaymentAccountAccountantType->AccountAccountantTypeId = $AccountAccountantTypeId;
            $PaymentAccountAccountantType->Description = $Description;
            return $PaymentAccountAccountantType;
        }

       /**
        * Constructor for PaymentAccountAccountantType
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['PaymentAccountHumanTypes'] = 'PaymentAccountHumanType';
            $this->_entityKey[] = 'AccountAccountantTypeId';
            $this->PaymentAccountHumanTypes = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:PaymentAccountHumanType
    * @type:EntityType
    * @key:AccountHumanTypeId
    */
    class PaymentAccountHumanType extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $AccountHumanTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $HumanDescription;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $AccountantAccountType;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $IsPhysicalAccount;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $ReadOnly;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_PaymentAccountHumanTypes_PaymentAccountAccountantTypes
        * @FromRole:PaymentAccountHumanType
        * @ToRole:PaymentAccountAccountantType
        */
        public $PaymentAccountAccountantType;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_PaymentAccounts_PaymentAccountHumanTypes
        * @FromRole:PaymentAccountHumanType
        * @ToRole:PaymentAccount
        */
        public $PaymentAccounts;
    

       /**
        * Function to create an instance of PaymentAccountHumanType
        * @param Edm.Int32 $AccountHumanTypeId
        */
        public static function CreatePaymentAccountHumanType(
            $AccountHumanTypeId)
        {   
            $PaymentAccountHumanType = new PaymentAccountHumanType();
            $PaymentAccountHumanType->AccountHumanTypeId = $AccountHumanTypeId;
            return $PaymentAccountHumanType;
        }

       /**
        * Constructor for PaymentAccountHumanType
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['PaymentAccountAccountantType'] = 'PaymentAccountAccountantType';
            $this->_entityMap['PaymentAccounts'] = 'PaymentAccount';
            $this->_entityKey[] = 'AccountHumanTypeId';
            $this->PaymentAccountAccountantType = array();
            $this->PaymentAccounts = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:PaymentAccount
    * @type:EntityType
    * @key:PaymentAccountId
    */
    class PaymentAccount extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PaymentAccountId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Boolean
        */
        public $Active;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $AccountType;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $OpeningBalance;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_PaymentAccounts_PaymentAccountHumanTypes
        * @FromRole:PaymentAccount
        * @ToRole:PaymentAccountHumanType
        */
        public $PaymentAccountHumanType;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Payments_PaymentAccounts
        * @FromRole:PaymentAccount
        * @ToRole:Payment
        */
        public $Payments;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Computers_PaymentAccounts
        * @FromRole:PaymentAccount
        * @ToRole:Computer
        */
        public $TillFloatAccountComputers;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Computers_PaymentAccounts1
        * @FromRole:PaymentAccount
        * @ToRole:Computer
        */
        public $TillDestinationAccountComputers;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_TillPaymentAccountRouting_PaymentAccounts
        * @FromRole:PaymentAccount
        * @ToRole:TillPaymentAccountRouting
        */
        public $TillPaymentAccountRoutings;
    

       /**
        * Function to create an instance of PaymentAccount
        * @param Edm.Int32 $PaymentAccountId
        * @param Edm.String $Description
        * @param Edm.Boolean $Active
        */
        public static function CreatePaymentAccount(
            $PaymentAccountId, 
            $Description, 
            $Active)
        {   
            $PaymentAccount = new PaymentAccount();
            $PaymentAccount->PaymentAccountId = $PaymentAccountId;
            $PaymentAccount->Description = $Description;
            $PaymentAccount->Active = $Active;
            return $PaymentAccount;
        }

       /**
        * Constructor for PaymentAccount
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['PaymentAccountHumanType'] = 'PaymentAccountHumanType';
            $this->_entityMap['Payments'] = 'Payment';
            $this->_entityMap['TillFloatAccountComputers'] = 'Computer';
            $this->_entityMap['TillDestinationAccountComputers'] = 'Computer';
            $this->_entityMap['TillPaymentAccountRoutings'] = 'TillPaymentAccountRouting';
            $this->_entityKey[] = 'PaymentAccountId';
            $this->PaymentAccountHumanType = array();
            $this->Payments = array();
            $this->TillFloatAccountComputers = array();
            $this->TillDestinationAccountComputers = array();
            $this->TillPaymentAccountRoutings = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:PaymentMethod
    * @type:EntityType
    * @key:PaymentMethodsId
    */
    class PaymentMethod extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PaymentMethodsId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Boolean
        */
        public $Active;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PaymentMethodTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $ShowInPOS;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $RowOrder;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_PaymentMethods_PaymentMethodTypes
        * @FromRole:PaymentMethod
        * @ToRole:PaymentMethodType
        */
        public $PaymentMethodType;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Payments_PaymentMethods
        * @FromRole:PaymentMethod
        * @ToRole:Payment
        */
        public $Payments;
    

       /**
        * Function to create an instance of PaymentMethod
        * @param Edm.Int32 $PaymentMethodsId
        * @param Edm.String $Description
        * @param Edm.Boolean $Active
        */
        public static function CreatePaymentMethod(
            $PaymentMethodsId, 
            $Description, 
            $Active)
        {   
            $PaymentMethod = new PaymentMethod();
            $PaymentMethod->PaymentMethodsId = $PaymentMethodsId;
            $PaymentMethod->Description = $Description;
            $PaymentMethod->Active = $Active;
            return $PaymentMethod;
        }

       /**
        * Constructor for PaymentMethod
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['PaymentMethodType'] = 'PaymentMethodType';
            $this->_entityMap['Payments'] = 'Payment';
            $this->_entityKey[] = 'PaymentMethodsId';
            $this->PaymentMethodType = array();
            $this->Payments = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:PaymentMethodType
    * @type:EntityType
    * @key:PaymentMethodTypeId
    */
    class PaymentMethodType extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PaymentMethodTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_PaymentMethods_PaymentMethodTypes
        * @FromRole:PaymentMethodType
        * @ToRole:PaymentMethod
        */
        public $PaymentMethods;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_TillPaymentAccountRouting_PaymentMethodTypes
        * @FromRole:PaymentMethodType
        * @ToRole:TillPaymentAccountRouting
        */
        public $TillPaymentAccountRoutings;
    

       /**
        * Function to create an instance of PaymentMethodType
        * @param Edm.Int32 $PaymentMethodTypeId
        */
        public static function CreatePaymentMethodType(
            $PaymentMethodTypeId)
        {   
            $PaymentMethodType = new PaymentMethodType();
            $PaymentMethodType->PaymentMethodTypeId = $PaymentMethodTypeId;
            return $PaymentMethodType;
        }

       /**
        * Constructor for PaymentMethodType
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['PaymentMethods'] = 'PaymentMethod';
            $this->_entityMap['TillPaymentAccountRoutings'] = 'TillPaymentAccountRouting';
            $this->_entityKey[] = 'PaymentMethodTypeId';
            $this->PaymentMethods = array();
            $this->TillPaymentAccountRoutings = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Payment
    * @type:EntityType
    * @key:PaymentId
    */
    class Payment extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PaymentId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.DateTime
        */
        public $PaymentDate;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PaymentAccountId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $TransactionRef;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PaymentMethodId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $UserId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Reconciled;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $ReconciledDate;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PaymentTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $OurRef;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Comments;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $MoneyIn;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $MoneyOut;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Payments_PaymentAccounts
        * @FromRole:Payment
        * @ToRole:PaymentAccount
        */
        public $PaymentAccount;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Payments_PaymentMethods
        * @FromRole:Payment
        * @ToRole:PaymentMethod
        */
        public $PaymentMethod;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Payments_PaymentTypes
        * @FromRole:Payment
        * @ToRole:PaymentType
        */
        public $PaymentType;
    

       /**
        * Function to create an instance of Payment
        * @param Edm.Int32 $PaymentId
        * @param Edm.DateTime $PaymentDate
        * @param Edm.Int32 $PaymentAccountId
        * @param Edm.Int32 $PaymentMethodId
        * @param Edm.Int32 $UserId
        */
        public static function CreatePayment(
            $PaymentId, 
            $PaymentDate, 
            $PaymentAccountId, 
            $PaymentMethodId, 
            $UserId)
        {   
            $Payment = new Payment();
            $Payment->PaymentId = $PaymentId;
            $Payment->PaymentDate = $PaymentDate;
            $Payment->PaymentAccountId = $PaymentAccountId;
            $Payment->PaymentMethodId = $PaymentMethodId;
            $Payment->UserId = $UserId;
            return $Payment;
        }

       /**
        * Constructor for Payment
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['PaymentAccount'] = 'PaymentAccount';
            $this->_entityMap['PaymentMethod'] = 'PaymentMethod';
            $this->_entityMap['PaymentType'] = 'PaymentType';
            $this->_entityKey[] = 'PaymentId';
            $this->PaymentAccount = array();
            $this->PaymentMethod = array();
            $this->PaymentType = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:PaymentTransfer
    * @type:EntityType
    * @key:PaymentTransfersId
    */
    class PaymentTransfer extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PaymentTransfersId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.DateTime
        */
        public $TransferDate;
    

       /**
        * Function to create an instance of PaymentTransfer
        * @param Edm.Int32 $PaymentTransfersId
        * @param Edm.String $Description
        * @param Edm.DateTime $TransferDate
        */
        public static function CreatePaymentTransfer(
            $PaymentTransfersId, 
            $Description, 
            $TransferDate)
        {   
            $PaymentTransfer = new PaymentTransfer();
            $PaymentTransfer->PaymentTransfersId = $PaymentTransfersId;
            $PaymentTransfer->Description = $Description;
            $PaymentTransfer->TransferDate = $TransferDate;
            return $PaymentTransfer;
        }

       /**
        * Constructor for PaymentTransfer
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityKey[] = 'PaymentTransfersId';
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:PaymentType
    * @type:EntityType
    * @key:PaymentTypeId
    */
    class PaymentType extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PaymentTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Payments_PaymentTypes
        * @FromRole:PaymentType
        * @ToRole:Payment
        */
        public $Payments;
    

       /**
        * Function to create an instance of PaymentType
        * @param Edm.Int32 $PaymentTypeId
        * @param Edm.String $Description
        */
        public static function CreatePaymentType(
            $PaymentTypeId, 
            $Description)
        {   
            $PaymentType = new PaymentType();
            $PaymentType->PaymentTypeId = $PaymentTypeId;
            $PaymentType->Description = $Description;
            return $PaymentType;
        }

       /**
        * Constructor for PaymentType
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Payments'] = 'Payment';
            $this->_entityKey[] = 'PaymentTypeId';
            $this->Payments = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Backup
    * @type:EntityType
    * @key:BackupId
    */
    class Backup extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $BackupId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $BackupTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Comments;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:248
        * @FixedLength:false
        */
        public $BackupPath;
    

       /**
        * Function to create an instance of Backup
        * @param Edm.Int32 $BackupId
        * @param Edm.Int32 $BackupTypeId
        * @param Edm.String $Comments
        * @param Edm.String $BackupPath
        */
        public static function CreateBackup(
            $BackupId, 
            $BackupTypeId, 
            $Comments, 
            $BackupPath)
        {   
            $Backup = new Backup();
            $Backup->BackupId = $BackupId;
            $Backup->BackupTypeId = $BackupTypeId;
            $Backup->Comments = $Comments;
            $Backup->BackupPath = $BackupPath;
            return $Backup;
        }

       /**
        * Constructor for Backup
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityKey[] = 'BackupId';
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:BackupTypesLookup
    * @type:EntityType
    * @key:BackupTypeId
    */
    class BackupTypesLookup extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $BackupTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    

       /**
        * Function to create an instance of BackupTypesLookup
        * @param Edm.Int32 $BackupTypeId
        * @param Edm.String $Description
        */
        public static function CreateBackupTypesLookup(
            $BackupTypeId, 
            $Description)
        {   
            $BackupTypesLookup = new BackupTypesLookup();
            $BackupTypesLookup->BackupTypeId = $BackupTypeId;
            $BackupTypesLookup->Description = $Description;
            return $BackupTypesLookup;
        }

       /**
        * Constructor for BackupTypesLookup
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityKey[] = 'BackupTypeId';
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Computer
    * @type:EntityType
    * @key:ComputerId
    */
    class Computer extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ComputerId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $ComputerName;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $LicenseKey;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $IsTill;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $TillDestinationAccountId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $TillFloatAccountId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $TillLastCashedUpDate;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $PostcodeLookupPIN;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $Active;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Computers_PaymentAccounts
        * @FromRole:Computer
        * @ToRole:PaymentAccount
        */
        public $TillFloatAccount;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Computers_PaymentAccounts1
        * @FromRole:Computer
        * @ToRole:PaymentAccount
        */
        public $TillDestinationAccount;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportsComputersPrinters_Computers
        * @FromRole:Computer
        * @ToRole:ReportsComputersPrinter
        */
        public $ReportsComputersPrinters;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_TillPaymentAccountRouting_Computers
        * @FromRole:Computer
        * @ToRole:TillPaymentAccountRouting
        */
        public $TillPaymentAccountRoutings;
    

       /**
        * Function to create an instance of Computer
        * @param Edm.Int32 $ComputerId
        * @param Edm.String $ComputerName
        */
        public static function CreateComputer(
            $ComputerId, 
            $ComputerName)
        {   
            $Computer = new Computer();
            $Computer->ComputerId = $ComputerId;
            $Computer->ComputerName = $ComputerName;
            return $Computer;
        }

       /**
        * Constructor for Computer
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['TillFloatAccount'] = 'PaymentAccount';
            $this->_entityMap['TillDestinationAccount'] = 'PaymentAccount';
            $this->_entityMap['ReportsComputersPrinters'] = 'ReportsComputersPrinter';
            $this->_entityMap['TillPaymentAccountRoutings'] = 'TillPaymentAccountRouting';
            $this->_entityKey[] = 'ComputerId';
            $this->TillFloatAccount = array();
            $this->TillDestinationAccount = array();
            $this->ReportsComputersPrinters = array();
            $this->TillPaymentAccountRoutings = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Country
    * @type:EntityType
    * @key:CountryId
    */
    class Country extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $CountryId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $CountryName;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:2
        * @FixedLength:true
        */
        public $ISO3166Code;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $DeliveryRegionId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Boolean
        */
        public $Active;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $CurrencyDescription;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:3
        * @FixedLength:true
        */
        public $ISO4217Code;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $CurrencyUnicodeSymbol;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $CurrencyWindows1252Symbol;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $TaxName;
    

       /**
        * Function to create an instance of Country
        * @param Edm.Int32 $CountryId
        * @param Edm.String $CountryName
        * @param Edm.Int32 $DeliveryRegionId
        * @param Edm.Boolean $Active
        */
        public static function CreateCountry(
            $CountryId, 
            $CountryName, 
            $DeliveryRegionId, 
            $Active)
        {   
            $Country = new Country();
            $Country->CountryId = $CountryId;
            $Country->CountryName = $CountryName;
            $Country->DeliveryRegionId = $DeliveryRegionId;
            $Country->Active = $Active;
            return $Country;
        }

       /**
        * Constructor for Country
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityKey[] = 'CountryId';
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:History
    * @type:EntityType
    * @key:HistoryId
    */
    class History extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $HistoryId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.DateTime
        */
        public $DateTime;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $UserId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $EventTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $OrderNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ConfigId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $CustomerId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ItemTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $StockId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $JobHoursId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ManuId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $OrderElementId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $OrderPaymentsId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PermissionsId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SubItemTypeId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $TaxId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $KnowledgeBaseCategoryId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $KnowledgeBaseId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SupplierId;
    

       /**
        * Function to create an instance of History
        * @param Edm.Int32 $HistoryId
        * @param Edm.DateTime $DateTime
        * @param Edm.Int32 $EventTypeId
        * @param Edm.String $Description
        */
        public static function CreateHistory(
            $HistoryId, 
            $DateTime, 
            $EventTypeId, 
            $Description)
        {   
            $History = new History();
            $History->HistoryId = $HistoryId;
            $History->DateTime = $DateTime;
            $History->EventTypeId = $EventTypeId;
            $History->Description = $Description;
            return $History;
        }

       /**
        * Constructor for History
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityKey[] = 'HistoryId';
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:HistoryEventTypesLookup
    * @type:EntityType
    * @key:HistoryEventTypeId
    */
    class HistoryEventTypesLookup extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $HistoryEventTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $HistoryEventType;
    

       /**
        * Function to create an instance of HistoryEventTypesLookup
        * @param Edm.Int32 $HistoryEventTypeId
        * @param Edm.String $HistoryEventType
        */
        public static function CreateHistoryEventTypesLookup(
            $HistoryEventTypeId, 
            $HistoryEventType)
        {   
            $HistoryEventTypesLookup = new HistoryEventTypesLookup();
            $HistoryEventTypesLookup->HistoryEventTypeId = $HistoryEventTypeId;
            $HistoryEventTypesLookup->HistoryEventType = $HistoryEventType;
            return $HistoryEventTypesLookup;
        }

       /**
        * Constructor for HistoryEventTypesLookup
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityKey[] = 'HistoryEventTypeId';
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:JobHours
    * @type:EntityType
    * @key:JobHoursId
    */
    class JobHours extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $JobHoursId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $OrderNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $UserId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $ClockOnTime;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $ClockOffTime;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_JobHours_ORDERS
        * @FromRole:JobHour
        * @ToRole:Order
        */
        public $Order;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_JobHours_Users
        * @FromRole:JobHour
        * @ToRole:User
        */
        public $User;
    

       /**
        * Function to create an instance of JobHours
        * @param Edm.Int32 $JobHoursId
        */
        public static function CreateJobHours(
            $JobHoursId)
        {   
            $JobHours = new JobHours();
            $JobHours->JobHoursId = $JobHoursId;
            return $JobHours;
        }

       /**
        * Constructor for JobHours
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Order'] = 'Order';
            $this->_entityMap['User'] = 'User';
            $this->_entityKey[] = 'JobHoursId';
            $this->Order = array();
            $this->User = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Licence
    * @type:EntityType
    * @key:MAC
    */
    class Licence extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:12
        * @FixedLength:false
        */
        public $MAC;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $String;
    

       /**
        * Function to create an instance of Licence
        * @param Edm.String $MAC
        * @param Edm.String $String
        */
        public static function CreateLicence(
            $MAC, 
            $String)
        {   
            $Licence = new Licence();
            $Licence->MAC = $MAC;
            $Licence->String = $String;
            return $Licence;
        }

       /**
        * Constructor for Licence
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityKey[] = 'MAC';
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:TillPaymentAccountRouting
    * @type:EntityType
    * @key:PaymentMethodTypeId
    * @key:TillComputerId
    */
    class TillPaymentAccountRouting extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TillComputerId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PaymentMethodTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $DestPaymentAccountId;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_TillPaymentAccountRouting_Computers
        * @FromRole:TillPaymentAccountRouting
        * @ToRole:Computer
        */
        public $Computer;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_TillPaymentAccountRouting_PaymentAccounts
        * @FromRole:TillPaymentAccountRouting
        * @ToRole:PaymentAccount
        */
        public $PaymentAccount;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_TillPaymentAccountRouting_PaymentMethodTypes
        * @FromRole:TillPaymentAccountRouting
        * @ToRole:PaymentMethodType
        */
        public $PaymentMethodType;
    

       /**
        * Function to create an instance of TillPaymentAccountRouting
        * @param Edm.Int32 $TillComputerId
        * @param Edm.Int32 $PaymentMethodTypeId
        * @param Edm.Int32 $DestPaymentAccountId
        */
        public static function CreateTillPaymentAccountRouting(
            $TillComputerId, 
            $PaymentMethodTypeId, 
            $DestPaymentAccountId)
        {   
            $TillPaymentAccountRouting = new TillPaymentAccountRouting();
            $TillPaymentAccountRouting->TillComputerId = $TillComputerId;
            $TillPaymentAccountRouting->PaymentMethodTypeId = $PaymentMethodTypeId;
            $TillPaymentAccountRouting->DestPaymentAccountId = $DestPaymentAccountId;
            return $TillPaymentAccountRouting;
        }

       /**
        * Constructor for TillPaymentAccountRouting
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Computer'] = 'Computer';
            $this->_entityMap['PaymentAccount'] = 'PaymentAccount';
            $this->_entityMap['PaymentMethodType'] = 'PaymentMethodType';
            $this->_entityKey[] = 'PaymentMethodTypeId';
            $this->_entityKey[] = 'TillComputerId';
            $this->Computer = array();
            $this->PaymentAccount = array();
            $this->PaymentMethodType = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Version
    * @type:EntityType
    * @key:AppVersion
    * @key:SchemaVersion
    */
    class Version extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $SchemaVersion;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $AppVersion;
    

       /**
        * Function to create an instance of Version
        * @param Edm.String $SchemaVersion
        * @param Edm.String $AppVersion
        */
        public static function CreateVersion(
            $SchemaVersion, 
            $AppVersion)
        {   
            $Version = new Version();
            $Version->SchemaVersion = $SchemaVersion;
            $Version->AppVersion = $AppVersion;
            return $Version;
        }

       /**
        * Constructor for Version
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityKey[] = 'AppVersion';
            $this->_entityKey[] = 'SchemaVersion';
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:TextAlignType
    * @type:EntityType
    * @key:TextAlignTypeId
    */
    class TextAlignType extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TextAlignTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ListViewColumns_TextAlignTypes
        * @FromRole:TextAlignType
        * @ToRole:ListViewColumn
        */
        public $ListViewColumns;
    

       /**
        * Function to create an instance of TextAlignType
        * @param Edm.Int32 $TextAlignTypeId
        * @param Edm.String $Description
        */
        public static function CreateTextAlignType(
            $TextAlignTypeId, 
            $Description)
        {   
            $TextAlignType = new TextAlignType();
            $TextAlignType->TextAlignTypeId = $TextAlignTypeId;
            $TextAlignType->Description = $Description;
            return $TextAlignType;
        }

       /**
        * Constructor for TextAlignType
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['ListViewColumns'] = 'ListViewColumn';
            $this->_entityKey[] = 'TextAlignTypeId';
            $this->ListViewColumns = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:EasifyTask
    * @type:EntityType
    * @key:TaskId
    */
    class EasifyTask extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TaskId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TaskTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TaskScheduleTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Comment;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $OurRef;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.DateTime
        */
        public $DateCreation;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.DateTime
        */
        public $DateStart;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $DateNext;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:19
        * @FixedLength:false
        */
        public $Expires;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $Interval;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Boolean
        */
        public $Skippable;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Boolean
        */
        public $Active;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Tasks_TaskScheduleTypesLookup
        * @FromRole:Task
        * @ToRole:TaskScheduleTypesLookup
        */
        public $TaskScheduleTypesLookup;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Tasks_TaskTypesLookup
        * @FromRole:Task
        * @ToRole:TaskTypesLookup
        */
        public $TaskTypesLookup;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_TaskScheduleDay_Tasks
        * @FromRole:Task
        * @ToRole:TaskScheduleDay
        */
        public $TaskScheduleDays;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_TaskScheduleMonth_Tasks
        * @FromRole:Task
        * @ToRole:TaskScheduleMonth
        */
        public $TaskScheduleMonths;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_TaskScheduleWeek_Tasks
        * @FromRole:Task
        * @ToRole:TaskScheduleWeek
        */
        public $TaskScheduleWeeks;
    

       /**
        * Function to create an instance of EasifyTask
        * @param Edm.Int32 $TaskId
        * @param Edm.Int32 $TaskTypeId
        * @param Edm.Int32 $TaskScheduleTypeId
        * @param Edm.String $Comment
        * @param Edm.Int32 $OurRef
        * @param Edm.DateTime $DateCreation
        * @param Edm.DateTime $DateStart
        * @param Edm.Boolean $Skippable
        * @param Edm.Boolean $Active
        */
        public static function CreateEasifyTask(
            $TaskId, 
            $TaskTypeId, 
            $TaskScheduleTypeId, 
            $Comment, 
            $OurRef, 
            $DateCreation, 
            $DateStart, 
            $Skippable, 
            $Active)
        {   
            $EasifyTask = new EasifyTask();
            $EasifyTask->TaskId = $TaskId;
            $EasifyTask->TaskTypeId = $TaskTypeId;
            $EasifyTask->TaskScheduleTypeId = $TaskScheduleTypeId;
            $EasifyTask->Comment = $Comment;
            $EasifyTask->OurRef = $OurRef;
            $EasifyTask->DateCreation = $DateCreation;
            $EasifyTask->DateStart = $DateStart;
            $EasifyTask->Skippable = $Skippable;
            $EasifyTask->Active = $Active;
            return $EasifyTask;
        }

       /**
        * Constructor for EasifyTask
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['TaskScheduleTypesLookup'] = 'TaskScheduleTypesLookup';
            $this->_entityMap['TaskTypesLookup'] = 'TaskTypesLookup';
            $this->_entityMap['TaskScheduleDays'] = 'TaskScheduleDay';
            $this->_entityMap['TaskScheduleMonths'] = 'TaskScheduleMonth';
            $this->_entityMap['TaskScheduleWeeks'] = 'TaskScheduleWeek';
            $this->_entityKey[] = 'TaskId';
            $this->TaskScheduleTypesLookup = array();
            $this->TaskTypesLookup = array();
            $this->TaskScheduleDays = array();
            $this->TaskScheduleMonths = array();
            $this->TaskScheduleWeeks = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:TaskScheduleDay
    * @type:EntityType
    * @key:TaskScheduleDayId
    */
    class TaskScheduleDay extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TaskScheduleDayId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TaskId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:90
        * @FixedLength:false
        */
        public $DayMonth;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_TaskScheduleDay_Tasks
        * @FromRole:TaskScheduleDay
        * @ToRole:Task
        */
        public $Task;
    

       /**
        * Function to create an instance of TaskScheduleDay
        * @param Edm.Int32 $TaskScheduleDayId
        * @param Edm.Int32 $TaskId
        * @param Edm.String $DayMonth
        */
        public static function CreateTaskScheduleDay(
            $TaskScheduleDayId, 
            $TaskId, 
            $DayMonth)
        {   
            $TaskScheduleDay = new TaskScheduleDay();
            $TaskScheduleDay->TaskScheduleDayId = $TaskScheduleDayId;
            $TaskScheduleDay->TaskId = $TaskId;
            $TaskScheduleDay->DayMonth = $DayMonth;
            return $TaskScheduleDay;
        }

       /**
        * Constructor for TaskScheduleDay
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Task'] = 'Task';
            $this->_entityKey[] = 'TaskScheduleDayId';
            $this->Task = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:TaskScheduleMonth
    * @type:EntityType
    * @key:TaskScheduleMonthId
    */
    class TaskScheduleMonth extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TaskScheduleMonthId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TaskId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:28
        * @FixedLength:false
        */
        public $Month;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_TaskScheduleMonth_Tasks
        * @FromRole:TaskScheduleMonth
        * @ToRole:Task
        */
        public $Task;
    

       /**
        * Function to create an instance of TaskScheduleMonth
        * @param Edm.Int32 $TaskScheduleMonthId
        * @param Edm.Int32 $TaskId
        * @param Edm.String $Month
        */
        public static function CreateTaskScheduleMonth(
            $TaskScheduleMonthId, 
            $TaskId, 
            $Month)
        {   
            $TaskScheduleMonth = new TaskScheduleMonth();
            $TaskScheduleMonth->TaskScheduleMonthId = $TaskScheduleMonthId;
            $TaskScheduleMonth->TaskId = $TaskId;
            $TaskScheduleMonth->Month = $Month;
            return $TaskScheduleMonth;
        }

       /**
        * Constructor for TaskScheduleMonth
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Task'] = 'Task';
            $this->_entityKey[] = 'TaskScheduleMonthId';
            $this->Task = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:TaskScheduleTypesLookup
    * @type:EntityType
    * @key:TaskScheduleTypeId
    */
    class TaskScheduleTypesLookup extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TaskScheduleTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $ScheduleType;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Tasks_TaskScheduleTypesLookup
        * @FromRole:TaskScheduleTypesLookup
        * @ToRole:Task
        */
        public $Tasks;
    

       /**
        * Function to create an instance of TaskScheduleTypesLookup
        * @param Edm.Int32 $TaskScheduleTypeId
        * @param Edm.String $ScheduleType
        */
        public static function CreateTaskScheduleTypesLookup(
            $TaskScheduleTypeId, 
            $ScheduleType)
        {   
            $TaskScheduleTypesLookup = new TaskScheduleTypesLookup();
            $TaskScheduleTypesLookup->TaskScheduleTypeId = $TaskScheduleTypeId;
            $TaskScheduleTypesLookup->ScheduleType = $ScheduleType;
            return $TaskScheduleTypesLookup;
        }

       /**
        * Constructor for TaskScheduleTypesLookup
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Tasks'] = 'Task';
            $this->_entityKey[] = 'TaskScheduleTypeId';
            $this->Tasks = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:TaskScheduleWeek
    * @type:EntityType
    * @key:TaskScheduleWeekId
    */
    class TaskScheduleWeek extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TaskScheduleWeekId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TaskId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:15
        * @FixedLength:false
        */
        public $WeekDay;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:14
        * @FixedLength:false
        */
        public $WeekMonth;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_TaskScheduleWeek_Tasks
        * @FromRole:TaskScheduleWeek
        * @ToRole:Task
        */
        public $Task;
    

       /**
        * Function to create an instance of TaskScheduleWeek
        * @param Edm.Int32 $TaskScheduleWeekId
        * @param Edm.Int32 $TaskId
        */
        public static function CreateTaskScheduleWeek(
            $TaskScheduleWeekId, 
            $TaskId)
        {   
            $TaskScheduleWeek = new TaskScheduleWeek();
            $TaskScheduleWeek->TaskScheduleWeekId = $TaskScheduleWeekId;
            $TaskScheduleWeek->TaskId = $TaskId;
            return $TaskScheduleWeek;
        }

       /**
        * Constructor for TaskScheduleWeek
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Task'] = 'Task';
            $this->_entityKey[] = 'TaskScheduleWeekId';
            $this->Task = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:TaskTypesLookup
    * @type:EntityType
    * @key:TaskTypeId
    */
    class TaskTypesLookup extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $TaskTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $TaskType;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_Tasks_TaskTypesLookup
        * @FromRole:TaskTypesLookup
        * @ToRole:Task
        */
        public $Tasks;
    

       /**
        * Function to create an instance of TaskTypesLookup
        * @param Edm.Int32 $TaskTypeId
        * @param Edm.String $TaskType
        */
        public static function CreateTaskTypesLookup(
            $TaskTypeId, 
            $TaskType)
        {   
            $TaskTypesLookup = new TaskTypesLookup();
            $TaskTypesLookup->TaskTypeId = $TaskTypeId;
            $TaskTypesLookup->TaskType = $TaskType;
            return $TaskTypesLookup;
        }

       /**
        * Constructor for TaskTypesLookup
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Tasks'] = 'Task';
            $this->_entityKey[] = 'TaskTypeId';
            $this->Tasks = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ProductImporterSetting
    * @type:EntityType
    * @key:ProductImporterSettingsId
    */
    class ProductImporterSetting extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ProductImporterSettingsId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $DefaultSupplier;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $DefaultCategory;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $DefaultSubcategory;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $DefaultManufacturer;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $DefaultTaxCode;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $OverwriteStockLevels;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $OnlyImportIfSKUMatchFound;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $RemoveQuotesFromDescriptions;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $RemoveRowsWithNoCostPrice;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $RemoveRowsWithNoMfrSKU;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $RemoveRowsWithNoSupplierSKU;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $AutoImportNewSuppliers;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $AutoImportNewCategories;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $AutoImportNewSubCategories;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $AutoImportNewManufacturers;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $AutoImportNewLocations;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $DefaultCostPrice;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Boolean
        */
        public $AllowZeroPrice;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ProductImportMappings_ProductImporterSettings
        * @FromRole:ProductImporterSetting
        * @ToRole:ProductImportMapping
        */
        public $ProductImportMappings;
    

       /**
        * Function to create an instance of ProductImporterSetting
        * @param Edm.Int32 $ProductImporterSettingsId
        * @param Edm.String $Description
        */
        public static function CreateProductImporterSetting(
            $ProductImporterSettingsId, 
            $Description)
        {   
            $ProductImporterSetting = new ProductImporterSetting();
            $ProductImporterSetting->ProductImporterSettingsId = $ProductImporterSettingsId;
            $ProductImporterSetting->Description = $Description;
            return $ProductImporterSetting;
        }

       /**
        * Constructor for ProductImporterSetting
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['ProductImportMappings'] = 'ProductImportMapping';
            $this->_entityKey[] = 'ProductImporterSettingsId';
            $this->ProductImportMappings = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ProductImportMapping
    * @type:EntityType
    * @key:ProductImportMappingsId
    */
    class ProductImportMapping extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ProductImportMappingsId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ProductImportSettingsId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $ImportedColumnName;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $EasifyColumnName;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ProductImportMappings_ProductImporterSettings
        * @FromRole:ProductImportMapping
        * @ToRole:ProductImporterSetting
        */
        public $ProductImporterSetting;
    

       /**
        * Function to create an instance of ProductImportMapping
        * @param Edm.Int32 $ProductImportMappingsId
        * @param Edm.Int32 $ProductImportSettingsId
        * @param Edm.String $ImportedColumnName
        * @param Edm.String $EasifyColumnName
        */
        public static function CreateProductImportMapping(
            $ProductImportMappingsId, 
            $ProductImportSettingsId, 
            $ImportedColumnName, 
            $EasifyColumnName)
        {   
            $ProductImportMapping = new ProductImportMapping();
            $ProductImportMapping->ProductImportMappingsId = $ProductImportMappingsId;
            $ProductImportMapping->ProductImportSettingsId = $ProductImportSettingsId;
            $ProductImportMapping->ImportedColumnName = $ImportedColumnName;
            $ProductImportMapping->EasifyColumnName = $EasifyColumnName;
            return $ProductImportMapping;
        }

       /**
        * Constructor for ProductImportMapping
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['ProductImporterSetting'] = 'ProductImporterSetting';
            $this->_entityKey[] = 'ProductImportMappingsId';
            $this->ProductImporterSetting = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ReportsPOSWhatToPrint
    * @type:EntityType
    * @key:ComputerName
    * @key:ReportId
    */
    class ReportsPOSWhatToPrint extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ReportId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $ComputerName;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $DefaultPrinterName;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PrintQty;
    

       /**
        * Function to create an instance of ReportsPOSWhatToPrint
        * @param Edm.Int32 $ReportId
        * @param Edm.String $ComputerName
        */
        public static function CreateReportsPOSWhatToPrint(
            $ReportId, 
            $ComputerName)
        {   
            $ReportsPOSWhatToPrint = new ReportsPOSWhatToPrint();
            $ReportsPOSWhatToPrint->ReportId = $ReportId;
            $ReportsPOSWhatToPrint->ComputerName = $ComputerName;
            return $ReportsPOSWhatToPrint;
        }

       /**
        * Constructor for ReportsPOSWhatToPrint
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityKey[] = 'ComputerName';
            $this->_entityKey[] = 'ReportId';
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:LoyaltyCard
    * @type:EntityType
    * @key:LoyaltyCardNo
    */
    class LoyaltyCard extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $LoyaltyCardNo;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.DateTime
        */
        public $DateIssued;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $CustomerNo;
    

       /**
        * Function to create an instance of LoyaltyCard
        * @param Edm.String $LoyaltyCardNo
        * @param Edm.DateTime $DateIssued
        * @param Edm.Int32 $CustomerNo
        */
        public static function CreateLoyaltyCard(
            $LoyaltyCardNo, 
            $DateIssued, 
            $CustomerNo)
        {   
            $LoyaltyCard = new LoyaltyCard();
            $LoyaltyCard->LoyaltyCardNo = $LoyaltyCardNo;
            $LoyaltyCard->DateIssued = $DateIssued;
            $LoyaltyCard->CustomerNo = $CustomerNo;
            return $LoyaltyCard;
        }

       /**
        * Constructor for LoyaltyCard
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityKey[] = 'LoyaltyCardNo';
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:Menu
    * @type:EntityType
    * @key:MenuId
    */
    class Menu extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $MenuId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $MenuName;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $MenuDescription;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ReportsMenus_Menus
        * @FromRole:Menu
        * @ToRole:ReportsMenu
        */
        public $ReportsMenus;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:ReportTypesMenus
        * @FromRole:Menu
        * @ToRole:ReportType
        */
        public $ReportTypes;
    

       /**
        * Function to create an instance of Menu
        * @param Edm.Int32 $MenuId
        */
        public static function CreateMenu(
            $MenuId)
        {   
            $Menu = new Menu();
            $Menu->MenuId = $MenuId;
            return $Menu;
        }

       /**
        * Constructor for Menu
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['ReportsMenus'] = 'ReportsMenu';
            $this->_entityMap['ReportTypes'] = 'ReportType';
            $this->_entityKey[] = 'MenuId';
            $this->ReportsMenus = array();
            $this->ReportTypes = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ProductCategoryType
    * @type:EntityType
    * @key:ProductCategoryTypeId
    */
    class ProductCategoryType extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ProductCategoryTypeId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:ProductCategoryProductCategoryType
        * @FromRole:ProductCategoryType
        * @ToRole:ProductCategory
        */
        public $ProductCategories;
    

       /**
        * Function to create an instance of ProductCategoryType
        * @param Edm.Int32 $ProductCategoryTypeId
        * @param Edm.String $Description
        */
        public static function CreateProductCategoryType(
            $ProductCategoryTypeId, 
            $Description)
        {   
            $ProductCategoryType = new ProductCategoryType();
            $ProductCategoryType->ProductCategoryTypeId = $ProductCategoryTypeId;
            $ProductCategoryType->Description = $Description;
            return $ProductCategoryType;
        }

       /**
        * Constructor for ProductCategoryType
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['ProductCategories'] = 'ProductCategory';
            $this->_entityKey[] = 'ProductCategoryTypeId';
            $this->ProductCategories = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:EcommerceQueue
    * @type:EntityType
    * @key:Id
    */
    class EcommerceQueue extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $Id;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $EndpointUri;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Boolean
        */
        public $Enabled;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $RetryDelaySeconds;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $DelaySendMilliseconds;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $HttpUsername;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $HttpPassword;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $PrivateKey;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SubscriptionTypeId;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_EcommerceQueueItems_EcommerceQueues
        * @FromRole:EcommerceQueue
        * @ToRole:EcommerceQueueItem
        */
        public $EcommerceQueueItems;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:EcommerceQueuesEntityNames
        * @FromRole:EcommerceQueue
        * @ToRole:EcommerceEntityName
        */
        public $EcommerceEntityNames;
    

       /**
        * Function to create an instance of EcommerceQueue
        * @param Edm.Int32 $Id
        * @param Edm.String $Description
        * @param Edm.String $EndpointUri
        * @param Edm.Boolean $Enabled
        * @param Edm.Int32 $RetryDelaySeconds
        * @param Edm.Int32 $DelaySendMilliseconds
        */
        public static function CreateEcommerceQueue(
            $Id, 
            $Description, 
            $EndpointUri, 
            $Enabled, 
            $RetryDelaySeconds, 
            $DelaySendMilliseconds)
        {   
            $EcommerceQueue = new EcommerceQueue();
            $EcommerceQueue->Id = $Id;
            $EcommerceQueue->Description = $Description;
            $EcommerceQueue->EndpointUri = $EndpointUri;
            $EcommerceQueue->Enabled = $Enabled;
            $EcommerceQueue->RetryDelaySeconds = $RetryDelaySeconds;
            $EcommerceQueue->DelaySendMilliseconds = $DelaySendMilliseconds;
            return $EcommerceQueue;
        }

       /**
        * Constructor for EcommerceQueue
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['EcommerceQueueItems'] = 'EcommerceQueueItem';
            $this->_entityMap['EcommerceEntityNames'] = 'EcommerceEntityName';
            $this->_entityKey[] = 'Id';
            $this->EcommerceQueueItems = array();
            $this->EcommerceEntityNames = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:EcommerceQueueItem
    * @type:EntityType
    * @key:Id
    */
    class EcommerceQueueItem extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $Id;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $QueueId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.DateTime
        */
        public $DateAdded;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Entity;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Value;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Status;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $RetryCount;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Action;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_EcommerceQueueItems_EcommerceQueues
        * @FromRole:EcommerceQueueItem
        * @ToRole:EcommerceQueue
        */
        public $EcommerceQueue;
    

       /**
        * Function to create an instance of EcommerceQueueItem
        * @param Edm.Int32 $Id
        * @param Edm.Int32 $QueueId
        * @param Edm.DateTime $DateAdded
        * @param Edm.String $Entity
        * @param Edm.String $Value
        * @param Edm.String $Status
        * @param Edm.Int32 $RetryCount
        * @param Edm.String $Action
        */
        public static function CreateEcommerceQueueItem(
            $Id, 
            $QueueId, 
            $DateAdded, 
            $Entity, 
            $Value, 
            $Status, 
            $RetryCount, 
            $Action)
        {   
            $EcommerceQueueItem = new EcommerceQueueItem();
            $EcommerceQueueItem->Id = $Id;
            $EcommerceQueueItem->QueueId = $QueueId;
            $EcommerceQueueItem->DateAdded = $DateAdded;
            $EcommerceQueueItem->Entity = $Entity;
            $EcommerceQueueItem->Value = $Value;
            $EcommerceQueueItem->Status = $Status;
            $EcommerceQueueItem->RetryCount = $RetryCount;
            $EcommerceQueueItem->Action = $Action;
            return $EcommerceQueueItem;
        }

       /**
        * Constructor for EcommerceQueueItem
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['EcommerceQueue'] = 'EcommerceQueue';
            $this->_entityKey[] = 'Id';
            $this->EcommerceQueue = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:EcommerceEntityName
    * @type:EntityType
    * @key:Id
    */
    class EcommerceEntityName extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $Id;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $EntityName;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:EcommerceQueuesEntityNames
        * @FromRole:EcommerceEntityName
        * @ToRole:EcommerceQueue
        */
        public $EcommerceQueues;
    

       /**
        * Function to create an instance of EcommerceEntityName
        * @param Edm.Int32 $Id
        * @param Edm.String $EntityName
        * @param Edm.String $Description
        */
        public static function CreateEcommerceEntityName(
            $Id, 
            $EntityName, 
            $Description)
        {   
            $EcommerceEntityName = new EcommerceEntityName();
            $EcommerceEntityName->Id = $Id;
            $EcommerceEntityName->EntityName = $EntityName;
            $EcommerceEntityName->Description = $Description;
            return $EcommerceEntityName;
        }

       /**
        * Constructor for EcommerceEntityName
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['EcommerceQueues'] = 'EcommerceQueue';
            $this->_entityKey[] = 'Id';
            $this->EcommerceQueues = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:LoyaltyPoint
    * @type:EntityType
    * @key:LoyaltyPointsId
    */
    class LoyaltyPoint extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $LoyaltyPointsId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $CustomerNo;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Double
        */
        public $Points;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Double
        */
        public $Redeemed;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.DateTime
        */
        public $CreationDate;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.DateTime
        */
        public $ExpiryDate;
    

       /**
        * Function to create an instance of LoyaltyPoint
        * @param Edm.Int32 $LoyaltyPointsId
        * @param Edm.Int32 $CustomerNo
        * @param Edm.Double $Points
        * @param Edm.Double $Redeemed
        * @param Edm.DateTime $CreationDate
        * @param Edm.DateTime $ExpiryDate
        */
        public static function CreateLoyaltyPoint(
            $LoyaltyPointsId, 
            $CustomerNo, 
            $Points, 
            $Redeemed, 
            $CreationDate, 
            $ExpiryDate)
        {   
            $LoyaltyPoint = new LoyaltyPoint();
            $LoyaltyPoint->LoyaltyPointsId = $LoyaltyPointsId;
            $LoyaltyPoint->CustomerNo = $CustomerNo;
            $LoyaltyPoint->Points = $Points;
            $LoyaltyPoint->Redeemed = $Redeemed;
            $LoyaltyPoint->CreationDate = $CreationDate;
            $LoyaltyPoint->ExpiryDate = $ExpiryDate;
            return $LoyaltyPoint;
        }

       /**
        * Constructor for LoyaltyPoint
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityKey[] = 'LoyaltyPointsId';
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:OrderDetail
    * @type:EntityType
    * @key:OrderDetailsId
    */
    class OrderDetail extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $OrderDetailsId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $Sku;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Single
        */
        public $Qty;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $OrderNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $UnitPrice;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Comments;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Decimal
        */
        public $BuyPrice;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $TaxRate;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $TaxId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Spare;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $LastModified;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ParentId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ExtParentId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ExtOrderDetailsId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $StatusId;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDER_ELEMENTS_ITEMS1
        * @FromRole:ORDER_ELEMENTS
        * @ToRole:Product
        */
        public $Product;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDER_ELEMENTS_OrderElementsStatusLookup1
        * @FromRole:ORDER_ELEMENTS
        * @ToRole:OrderDetailStatus
        */
        public $OrderDetailStatus;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDER_ELEMENTS_ORDERS1
        * @FromRole:ORDER_ELEMENTS
        * @ToRole:Order
        */
        public $Order;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ORDER_ELEMENTS_TaxRates1
        * @FromRole:ORDER_ELEMENTS
        * @ToRole:TaxRate
        */
        public $TaxRates;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ProductsAllocatedToOrders_ORDER_ELEMENTS1
        * @FromRole:ORDER_ELEMENTS
        * @ToRole:ProductsAllocatedToOrder
        */
        public $ProductsAllocatedToOrders;
    

       /**
        * Function to create an instance of OrderDetail
        * @param Edm.Int32 $OrderDetailsId
        */
        public static function CreateOrderDetail(
            $OrderDetailsId)
        {   
            $OrderDetail = new OrderDetail();
            $OrderDetail->OrderDetailsId = $OrderDetailsId;
            return $OrderDetail;
        }

       /**
        * Constructor for OrderDetail
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Product'] = 'Product';
            $this->_entityMap['OrderDetailStatus'] = 'OrderDetailStatus';
            $this->_entityMap['Order'] = 'Order';
            $this->_entityMap['TaxRates'] = 'TaxRate';
            $this->_entityMap['ProductsAllocatedToOrders'] = 'ProductsAllocatedToOrder';
            $this->_entityKey[] = 'OrderDetailsId';
            $this->Product = array();
            $this->OrderDetailStatus = array();
            $this->Order = array();
            $this->TaxRates = array();
            $this->ProductsAllocatedToOrders = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:EmailQueue
    * @type:EntityType
    * @key:Id
    */
    class EmailQueue extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $Id;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Subject;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Recipients;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Body;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $RetryCount;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.DateTime
        */
        public $LastTry;
    

       /**
        * Function to create an instance of EmailQueue
        * @param Edm.Int32 $Id
        * @param Edm.String $Subject
        * @param Edm.String $Recipients
        * @param Edm.String $Body
        * @param Edm.Int32 $RetryCount
        * @param Edm.DateTime $LastTry
        */
        public static function CreateEmailQueue(
            $Id, 
            $Subject, 
            $Recipients, 
            $Body, 
            $RetryCount, 
            $LastTry)
        {   
            $EmailQueue = new EmailQueue();
            $EmailQueue->Id = $Id;
            $EmailQueue->Subject = $Subject;
            $EmailQueue->Recipients = $Recipients;
            $EmailQueue->Body = $Body;
            $EmailQueue->RetryCount = $RetryCount;
            $EmailQueue->LastTry = $LastTry;
            return $EmailQueue;
        }

       /**
        * Constructor for EmailQueue
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityKey[] = 'Id';
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ProductCondition
    * @type:EntityType
    * @key:Id
    */
    class ProductCondition extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $Id;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Description;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Boolean
        */
        public $IsNewCondition;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Boolean
        */
        public $Default;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $SortOrder;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ITEMS_ProductConditions
        * @FromRole:ProductCondition
        * @ToRole:Product
        */
        public $Products;
    

       /**
        * Function to create an instance of ProductCondition
        * @param Edm.Int32 $Id
        * @param Edm.String $Description
        * @param Edm.Boolean $IsNewCondition
        * @param Edm.Boolean $Default
        * @param Edm.Int32 $SortOrder
        */
        public static function CreateProductCondition(
            $Id, 
            $Description, 
            $IsNewCondition, 
            $Default, 
            $SortOrder)
        {   
            $ProductCondition = new ProductCondition();
            $ProductCondition->Id = $Id;
            $ProductCondition->Description = $Description;
            $ProductCondition->IsNewCondition = $IsNewCondition;
            $ProductCondition->Default = $Default;
            $ProductCondition->SortOrder = $SortOrder;
            return $ProductCondition;
        }

       /**
        * Constructor for ProductCondition
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['Products'] = 'Product';
            $this->_entityKey[] = 'Id';
            $this->Products = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:ProductInfoImage
    * @type:EntityType
    * @key:ProductInfoImageId
    */
    class ProductInfoImage extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $ProductInfoImageId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ProductInfoId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Binary
        */
        public $ImageBlob;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $ImageName;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $ImageSizeBytes;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SortOrder;
    
       /**
        * @Type:NavigationProperty
        * @Relationship:FK_ProductInfoImages_ProductInfo1
        * @FromRole:ProductInfoImage
        * @ToRole:ProductInfo
        */
        public $ProductInfo;
    

       /**
        * Function to create an instance of ProductInfoImage
        * @param Edm.Int32 $ProductInfoImageId
        */
        public static function CreateProductInfoImage(
            $ProductInfoImageId)
        {   
            $ProductInfoImage = new ProductInfoImage();
            $ProductInfoImage->ProductInfoImageId = $ProductInfoImageId;
            return $ProductInfoImage;
        }

       /**
        * Constructor for ProductInfoImage
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityMap['ProductInfo'] = 'ProductInfo';
            $this->_entityKey[] = 'ProductInfoImageId';
            $this->ProductInfo = array();
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:BlobTransfer
    * @type:EntityType
    * @key:BlobId
    */
    class BlobTransfer extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $BlobId;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Blob;
    

       /**
        * Function to create an instance of BlobTransfer
        * @param Edm.Int32 $BlobId
        * @param Edm.String $Blob
        */
        public static function CreateBlobTransfer(
            $BlobId, 
            $Blob)
        {   
            $BlobTransfer = new BlobTransfer();
            $BlobTransfer->BlobId = $BlobId;
            $BlobTransfer->Blob = $Blob;
            return $BlobTransfer;
        }

       /**
        * Constructor for BlobTransfer
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
            $this->_entityKey[] = 'BlobId';
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * Container class EasifyEntities, Namespace: EasifyModel
    */
    class EasifyEntities extends ObjectContext
    {
    
        protected $_Products;
        protected $_ProductCategories;
        protected $_ProductSubcategories;
        protected $_Config;
        protected $_Manufacturers;
        protected $_ProductTypes;
        protected $_KnowledgebaseCategories;
        protected $_KnowledgebaseArticles;
        protected $_PermissionCategories;
        protected $_Permissions;
        protected $_Users;
        protected $_UsersDialoguesDoNotPrompt;
        protected $_Purchases;
        protected $_Suppliers;
        protected $_PaymentTerms;
        protected $_PurchaseDetails;
        protected $_PurchaseInternalNotes;
        protected $_PurchaseStatuses;
        protected $_PurchaseTypes;
        protected $_ProductInfo;
        protected $_ProductLocations;
        protected $_ProductsAllocatedToOrders;
        protected $_TaxRates;
        protected $_OrderStatuses;
        protected $_OrderDetailStatus;
        protected $_Orders;
        protected $_OrderStatusTypes;
        protected $_OrderTypes;
        protected $_DataTypes;
        protected $_ReportElements;
        protected $_ReportElementTypes;
        protected $_ReportFormatStrings;
        protected $_ReportMergeFields;
        protected $_Reports;
        protected $_ReportsComputersPrinters;
        protected $_ReportSections;
        protected $_ReportSectionTypes;
        protected $_ReportsMenus;
        protected $_ReportTypes;
        protected $_ListViewColumns;
        protected $_ListViews;
        protected $_ListViewUsersColumns;
        protected $_CustomerRelationships;
        protected $_Customers;
        protected $_CustomerTypes;
        protected $_PaymentAccountAccountantTypes;
        protected $_PaymentAccountHumanTypes;
        protected $_PaymentAccounts;
        protected $_PaymentMethods;
        protected $_PaymentMethodTypes;
        protected $_Payments;
        protected $_PaymentTransfers;
        protected $_PaymentTypes;
        protected $_Backups;
        protected $_BackupTypesLookups;
        protected $_Computers;
        protected $_Countries;
        protected $_Histories;
        protected $_HistoryEventTypesLookups;
        protected $_JobHours;
        protected $_Licences;
        protected $_TillPaymentAccountRoutings;
        protected $_Versions;
        protected $_TextAlignTypes;
        protected $_EasifyTasks;
        protected $_TaskScheduleDays;
        protected $_TaskScheduleMonths;
        protected $_TaskScheduleTypesLookups;
        protected $_TaskScheduleWeeks;
        protected $_TaskTypesLookups;
        protected $_ProductImporterSettings;
        protected $_ProductImportMappings;
        protected $_ReportsPOSWhatToPrints;
        protected $_LoyaltyCards;
        protected $_Menus;
        protected $_ProductCategoryTypes;
        protected $_EcommerceQueues;
        protected $_EcommerceQueueItems;
        protected $_EcommerceEntityNames;
        protected $_LoyaltyPoints;
        protected $_OrderDetails;
        protected $_EmailQueues;
        protected $_ProductConditions;
        protected $_ProductInfoImages;
        protected $_BlobTransfers;
        
       /**
        * The constructor for EasifyEntities accepting service URI
        */
        public function __construct($uri = "")
        {
            if(strlen($uri) == 0)
            {
                $uri = DEFAULT_ODATA_SERVICE_URL;
            }

            if (Utility::reverseFind($uri, '/') != strlen($uri) - 1)
            {
                $uri = $uri . '/';
            }

            $this->_baseURI = $uri;
            parent::__construct($this->_baseURI);
            $this->_entities = array(
                                "Products",
                                "ProductCategories",
                                "ProductSubcategories",
                                "Config",
                                "Manufacturers",
                                "ProductTypes",
                                "KnowledgebaseCategories",
                                "KnowledgebaseArticles",
                                "PermissionCategories",
                                "Permissions",
                                "Users",
                                "UsersDialoguesDoNotPrompt",
                                "Purchases",
                                "Suppliers",
                                "PaymentTerms",
                                "PurchaseDetails",
                                "PurchaseInternalNotes",
                                "PurchaseStatuses",
                                "PurchaseTypes",
                                "ProductInfo",
                                "ProductLocations",
                                "ProductsAllocatedToOrders",
                                "TaxRates",
                                "OrderStatuses",
                                "OrderDetailStatus",
                                "Orders",
                                "OrderStatusTypes",
                                "OrderTypes",
                                "DataTypes",
                                "ReportElements",
                                "ReportElementTypes",
                                "ReportFormatStrings",
                                "ReportMergeFields",
                                "Reports",
                                "ReportsComputersPrinters",
                                "ReportSections",
                                "ReportSectionTypes",
                                "ReportsMenus",
                                "ReportTypes",
                                "ListViewColumns",
                                "ListViews",
                                "ListViewUsersColumns",
                                "CustomerRelationships",
                                "Customers",
                                "CustomerTypes",
                                "PaymentAccountAccountantTypes",
                                "PaymentAccountHumanTypes",
                                "PaymentAccounts",
                                "PaymentMethods",
                                "PaymentMethodTypes",
                                "Payments",
                                "PaymentTransfers",
                                "PaymentTypes",
                                "Backups",
                                "BackupTypesLookups",
                                "Computers",
                                "Countries",
                                "Histories",
                                "HistoryEventTypesLookups",
                                "JobHours",
                                "Licences",
                                "TillPaymentAccountRoutings",
                                "Versions",
                                "TextAlignTypes",
                                "EasifyTasks",
                                "TaskScheduleDays",
                                "TaskScheduleMonths",
                                "TaskScheduleTypesLookups",
                                "TaskScheduleWeeks",
                                "TaskTypesLookups",
                                "ProductImporterSettings",
                                "ProductImportMappings",
                                "ReportsPOSWhatToPrints",
                                "LoyaltyCards",
                                "Menus",
                                "ProductCategoryTypes",
                                "EcommerceQueues",
                                "EcommerceQueueItems",
                                "EcommerceEntityNames",
                                "LoyaltyPoints",
                                "OrderDetails",
                                "EmailQueues",
                                "ProductConditions",
                                "ProductInfoImages",
                                "BlobTransfers");
            $this->_entitySet2Type = array(
                                            "products" => "Product", 
                                            "productcategories" => "ProductCategory", 
                                            "productsubcategories" => "ProductSubcategory", 
                                            "config" => "Config", 
                                            "manufacturers" => "Manufacturer", 
                                            "producttypes" => "ProductType", 
                                            "knowledgebasecategories" => "KnowledgebaseCategory", 
                                            "knowledgebasearticles" => "KnowledgebaseArticle", 
                                            "permissioncategories" => "PermissionCategory", 
                                            "permissions" => "Permission", 
                                            "users" => "User", 
                                            "usersdialoguesdonotprompt" => "UsersDialoguesDoNotPrompt", 
                                            "purchases" => "Purchase", 
                                            "suppliers" => "Supplier", 
                                            "paymentterms" => "PaymentTerm", 
                                            "purchasedetails" => "PurchaseDetail", 
                                            "purchaseinternalnotes" => "PurchaseInternalNote", 
                                            "purchasestatuses" => "PurchaseStatus", 
                                            "purchasetypes" => "PurchaseType", 
                                            "productinfo" => "ProductInfo", 
                                            "productlocations" => "ProductLocation", 
                                            "productsallocatedtoorders" => "ProductsAllocatedToOrder", 
                                            "taxrates" => "TaxRate", 
                                            "orderstatuses" => "OrderStatus", 
                                            "orderdetailstatus" => "OrderDetailStatus", 
                                            "orders" => "Order", 
                                            "orderstatustypes" => "OrderStatusType", 
                                            "ordertypes" => "OrderType", 
                                            "datatypes" => "DataType", 
                                            "reportelements" => "ReportElement", 
                                            "reportelementtypes" => "ReportElementType", 
                                            "reportformatstrings" => "ReportFormatString", 
                                            "reportmergefields" => "ReportMergeField", 
                                            "reports" => "Report", 
                                            "reportscomputersprinters" => "ReportsComputersPrinter", 
                                            "reportsections" => "ReportSection", 
                                            "reportsectiontypes" => "ReportSectionType", 
                                            "reportsmenus" => "ReportsMenu", 
                                            "reporttypes" => "ReportType", 
                                            "listviewcolumns" => "ListViewColumn", 
                                            "listviews" => "ListView", 
                                            "listviewuserscolumns" => "ListViewUsersColumn", 
                                            "customerrelationships" => "CustomerRelationship", 
                                            "customers" => "Customer", 
                                            "customertypes" => "CustomerType", 
                                            "paymentaccountaccountanttypes" => "PaymentAccountAccountantType", 
                                            "paymentaccounthumantypes" => "PaymentAccountHumanType", 
                                            "paymentaccounts" => "PaymentAccount", 
                                            "paymentmethods" => "PaymentMethod", 
                                            "paymentmethodtypes" => "PaymentMethodType", 
                                            "payments" => "Payment", 
                                            "paymenttransfers" => "PaymentTransfer", 
                                            "paymenttypes" => "PaymentType", 
                                            "backups" => "Backup", 
                                            "backuptypeslookups" => "BackupTypesLookup", 
                                            "computers" => "Computer", 
                                            "countries" => "Country", 
                                            "histories" => "History", 
                                            "historyeventtypeslookups" => "HistoryEventTypesLookup", 
                                            "jobhours" => "JobHours", 
                                            "licences" => "Licence", 
                                            "tillpaymentaccountroutings" => "TillPaymentAccountRouting", 
                                            "versions" => "Version", 
                                            "textaligntypes" => "TextAlignType", 
                                            "easifytasks" => "EasifyTask", 
                                            "taskscheduledays" => "TaskScheduleDay", 
                                            "taskschedulemonths" => "TaskScheduleMonth", 
                                            "taskscheduletypeslookups" => "TaskScheduleTypesLookup", 
                                            "taskscheduleweeks" => "TaskScheduleWeek", 
                                            "tasktypeslookups" => "TaskTypesLookup", 
                                            "productimportersettings" => "ProductImporterSetting", 
                                            "productimportmappings" => "ProductImportMapping", 
                                            "reportsposwhattoprints" => "ReportsPOSWhatToPrint", 
                                            "loyaltycards" => "LoyaltyCard", 
                                            "menus" => "Menu", 
                                            "productcategorytypes" => "ProductCategoryType", 
                                            "ecommercequeues" => "EcommerceQueue", 
                                            "ecommercequeueitems" => "EcommerceQueueItem", 
                                            "ecommerceentitynames" => "EcommerceEntityName", 
                                            "loyaltypoints" => "LoyaltyPoint", 
                                            "orderdetails" => "OrderDetail", 
                                            "emailqueues" => "EmailQueue", 
                                            "productconditions" => "ProductCondition", 
                                            "productinfoimages" => "ProductInfoImage", 
                                            "blobtransfers" => "BlobTransfer");
            $this->_entityType2Set = array(
                                            "product" => "Products", 
                                            "productcategory" => "ProductCategories", 
                                            "productsubcategory" => "ProductSubcategories", 
                                            "config" => "Config", 
                                            "manufacturer" => "Manufacturers", 
                                            "producttype" => "ProductTypes", 
                                            "knowledgebasecategory" => "KnowledgebaseCategories", 
                                            "knowledgebasearticle" => "KnowledgebaseArticles", 
                                            "permissioncategory" => "PermissionCategories", 
                                            "permission" => "Permissions", 
                                            "user" => "Users", 
                                            "usersdialoguesdonotprompt" => "UsersDialoguesDoNotPrompt", 
                                            "purchase" => "Purchases", 
                                            "supplier" => "Suppliers", 
                                            "paymentterm" => "PaymentTerms", 
                                            "purchasedetail" => "PurchaseDetails", 
                                            "purchaseinternalnote" => "PurchaseInternalNotes", 
                                            "purchasestatus" => "PurchaseStatuses", 
                                            "purchasetype" => "PurchaseTypes", 
                                            "productinfo" => "ProductInfo", 
                                            "productlocation" => "ProductLocations", 
                                            "productsallocatedtoorder" => "ProductsAllocatedToOrders", 
                                            "taxrate" => "TaxRates", 
                                            "orderstatus" => "OrderStatuses", 
                                            "orderdetailstatus" => "OrderDetailStatus", 
                                            "order" => "Orders", 
                                            "orderstatustype" => "OrderStatusTypes", 
                                            "ordertype" => "OrderTypes", 
                                            "datatype" => "DataTypes", 
                                            "reportelement" => "ReportElements", 
                                            "reportelementtype" => "ReportElementTypes", 
                                            "reportformatstring" => "ReportFormatStrings", 
                                            "reportmergefield" => "ReportMergeFields", 
                                            "report" => "Reports", 
                                            "reportscomputersprinter" => "ReportsComputersPrinters", 
                                            "reportsection" => "ReportSections", 
                                            "reportsectiontype" => "ReportSectionTypes", 
                                            "reportsmenu" => "ReportsMenus", 
                                            "reporttype" => "ReportTypes", 
                                            "listviewcolumn" => "ListViewColumns", 
                                            "listview" => "ListViews", 
                                            "listviewuserscolumn" => "ListViewUsersColumns", 
                                            "customerrelationship" => "CustomerRelationships", 
                                            "customer" => "Customers", 
                                            "customertype" => "CustomerTypes", 
                                            "paymentaccountaccountanttype" => "PaymentAccountAccountantTypes", 
                                            "paymentaccounthumantype" => "PaymentAccountHumanTypes", 
                                            "paymentaccount" => "PaymentAccounts", 
                                            "paymentmethod" => "PaymentMethods", 
                                            "paymentmethodtype" => "PaymentMethodTypes", 
                                            "payment" => "Payments", 
                                            "paymenttransfer" => "PaymentTransfers", 
                                            "paymenttype" => "PaymentTypes", 
                                            "backup" => "Backups", 
                                            "backuptypeslookup" => "BackupTypesLookups", 
                                            "computer" => "Computers", 
                                            "country" => "Countries", 
                                            "history" => "Histories", 
                                            "historyeventtypeslookup" => "HistoryEventTypesLookups", 
                                            "jobhours" => "JobHours", 
                                            "licence" => "Licences", 
                                            "tillpaymentaccountrouting" => "TillPaymentAccountRoutings", 
                                            "version" => "Versions", 
                                            "textaligntype" => "TextAlignTypes", 
                                            "easifytask" => "EasifyTasks", 
                                            "taskscheduleday" => "TaskScheduleDays", 
                                            "taskschedulemonth" => "TaskScheduleMonths", 
                                            "taskscheduletypeslookup" => "TaskScheduleTypesLookups", 
                                            "taskscheduleweek" => "TaskScheduleWeeks", 
                                            "tasktypeslookup" => "TaskTypesLookups", 
                                            "productimportersetting" => "ProductImporterSettings", 
                                            "productimportmapping" => "ProductImportMappings", 
                                            "reportsposwhattoprint" => "ReportsPOSWhatToPrints", 
                                            "loyaltycard" => "LoyaltyCards", 
                                            "menu" => "Menus", 
                                            "productcategorytype" => "ProductCategoryTypes", 
                                            "ecommercequeue" => "EcommerceQueues", 
                                            "ecommercequeueitem" => "EcommerceQueueItems", 
                                            "ecommerceentityname" => "EcommerceEntityNames", 
                                            "loyaltypoint" => "LoyaltyPoints", 
                                            "orderdetail" => "OrderDetails", 
                                            "emailqueue" => "EmailQueues", 
                                            "productcondition" => "ProductConditions", 
                                            "productinfoimage" => "ProductInfoImages", 
                                            "blobtransfer" => "BlobTransfers");

            $this->_association = array(
                                         "FK_ITEMS_SUB_ITEM_TYPES_LOOKUP" => array(
                                                                         "SUB_ITEM_TYPES_LOOKUP" => "0..1" ,
                                                                         "Products" => "*" ), 
                                         "FK_ITEMS_MANUFACTURER_LOOKUP" => array(
                                                                         "Manufacturers" => "0..1" ,
                                                                         "Products" => "*" ), 
                                         "ProductCategoriesProducts" => array(
                                                                         "ProductCategories" => "0..1" ,
                                                                         "Products" => "*" ), 
                                         "ItemTypesProducts" => array(
                                                                         "ItemTypes" => "1" ,
                                                                         "Products" => "*" ), 
                                         "FK_ITEMS_VENDORS" => array(
                                                                         "VENDOR" => "0..1" ,
                                                                         "Items" => "*" ), 
                                         "FK_ITEMS_ProductLocations" => array(
                                                                         "ProductLocation" => "0..1" ,
                                                                         "Products" => "*" ), 
                                         "FK_ITEMS_TaxRates" => array(
                                                                         "TaxRate" => "0..1" ,
                                                                         "Products" => "*" ), 
                                         "FK_ProductInfo_ITEMS" => array(
                                                                         "Products" => "1" ,
                                                                         "ProductInfo" => "*" ), 
                                         "FK_ProductsAllocatedToOrders_ITEMS" => array(
                                                                         "Products" => "1" ,
                                                                         "ProductsAllocatedToOrder" => "*" ), 
                                         "FK_ORDER_ELEMENTS_ITEMS1" => array(
                                                                         "Product" => "0..1" ,
                                                                         "ORDER_ELEMENTS" => "*" ), 
                                         "FK_ITEMS_ProductConditions" => array(
                                                                         "ProductCondition" => "0..1" ,
                                                                         "Product" => "*" ), 
                                         "ProductCategoryProductCategoryType" => array(
                                                                         "ProductCategoryType" => "1" ,
                                                                         "ProductCategory" => "*" ), 
                                         "FK_tbKnowledgeBase_tbKBCategories" => array(
                                                                         "tbKBCategories" => "1" ,
                                                                         "tbKnowledgeBase" => "*" ), 
                                         "FK_Permissions_PermissionCategories" => array(
                                                                         "PermissionCategories" => "1" ,
                                                                         "Permissions" => "*" ), 
                                         "UsersPermissions" => array(
                                                                         "Users" => "*" ,
                                                                         "Permissions" => "*" ), 
                                         "FK_UsersDialoguesDoNotPrompt_Users" => array(
                                                                         "Users" => "1" ,
                                                                         "UsersDialoguesDoNotPrompt" => "*" ), 
                                         "PurchaseAssignments" => array(
                                                                         "Purchase" => "*" ,
                                                                         "Users" => "*" ), 
                                         "FK_ORDERS_Users" => array(
                                                                         "Users" => "0..1" ,
                                                                         "Order" => "*" ), 
                                         "FK_ListViewUsersColumns_Users" => array(
                                                                         "User" => "1" ,
                                                                         "ListViewUsersColumn" => "*" ), 
                                         "FK_JobHours_Users" => array(
                                                                         "User" => "0..1" ,
                                                                         "JobHour" => "*" ), 
                                         "JobAssignments" => array(
                                                                         "Order" => "*" ,
                                                                         "User" => "*" ), 
                                         "FK_Purchases_PaymentTerms" => array(
                                                                         "PaymentTerm" => "0..1" ,
                                                                         "Purchase" => "*" ), 
                                         "FK_Purchases_VENDORS" => array(
                                                                         "Suppliers" => "0..1" ,
                                                                         "Purchase" => "*" ), 
                                         "FK_PurchaseDetails_Purchases" => array(
                                                                         "Purchase" => "0..1" ,
                                                                         "PurchaseDetail" => "*" ), 
                                         "FK_PurchaseInternalNotes_Purchases" => array(
                                                                         "Purchase" => "0..1" ,
                                                                         "PurchaseInternalNote" => "*" ), 
                                         "FK_Purchases_PurchaseStatus" => array(
                                                                         "PurchaseStatu" => "0..1" ,
                                                                         "Purchase" => "*" ), 
                                         "FK_Purchases_PurchaseTypes" => array(
                                                                         "PurchaseType" => "0..1" ,
                                                                         "Purchase" => "*" ), 
                                         "FK_VENDORS_PaymentTerms" => array(
                                                                         "PaymentTerm" => "0..1" ,
                                                                         "Suppliers" => "*" ), 
                                         "FK_ORDERS_PaymentTerms" => array(
                                                                         "PaymentTerm" => "0..1" ,
                                                                         "ORDER" => "*" ), 
                                         "FK_Customers_PaymentTerms" => array(
                                                                         "PaymentTerm" => "0..1" ,
                                                                         "Customer" => "*" ), 
                                         "FK_ProductInfoImages_ProductInfo1" => array(
                                                                         "ProductInfo" => "0..1" ,
                                                                         "ProductInfoImage" => "*" ), 
                                         "FK_ProductsAllocatedToOrders_ORDER_ELEMENTS1" => array(
                                                                         "ORDER_ELEMENTS" => "1" ,
                                                                         "ProductsAllocatedToOrder" => "*" ), 
                                         "FK_ORDER_ELEMENTS_TaxRates1" => array(
                                                                         "TaxRate" => "0..1" ,
                                                                         "ORDER_ELEMENTS" => "*" ), 
                                         "FK_ORDER_STATUS_LOOKUP_OrderStatusTypeLookup" => array(
                                                                         "OrderStatusTypeLookup" => "1" ,
                                                                         "ORDER_STATUS_LOOKUP" => "*" ), 
                                         "FK_ORDERS_ORDER_STATUS_LOOKUP" => array(
                                                                         "ORDER_STATUS_LOOKUP" => "0..1" ,
                                                                         "ORDER" => "*" ), 
                                         "FK_ORDER_ELEMENTS_OrderElementsStatusLookup1" => array(
                                                                         "OrderDetailStatus" => "0..1" ,
                                                                         "ORDER_ELEMENTS" => "*" ), 
                                         "FK_ORDERS_OrderTypes" => array(
                                                                         "OrderType" => "0..1" ,
                                                                         "ORDER" => "*" ), 
                                         "FK_ORDERS_CUSTOMERS" => array(
                                                                         "Customer" => "0..1" ,
                                                                         "Order" => "*" ), 
                                         "FK_JobHours_ORDERS" => array(
                                                                         "Order" => "0..1" ,
                                                                         "JobHour" => "*" ), 
                                         "FK_ORDER_ELEMENTS_ORDERS1" => array(
                                                                         "Order" => "0..1" ,
                                                                         "ORDER_ELEMENTS" => "*" ), 
                                         "FK_ReportElements_DataTypes" => array(
                                                                         "DataType" => "0..1" ,
                                                                         "ReportElement" => "*" ), 
                                         "FK_ReportFormatStrings_DataTypes" => array(
                                                                         "DataType" => "0..1" ,
                                                                         "ReportFormatString" => "*" ), 
                                         "FK_ReportMergeFields_DataTypes" => array(
                                                                         "DataType" => "0..1" ,
                                                                         "ReportMergeField" => "*" ), 
                                         "FK_ListViewColumns_DataTypes" => array(
                                                                         "DataType" => "1" ,
                                                                         "ListViewColumn" => "*" ), 
                                         "FK_ReportElements_ReportElementTypes" => array(
                                                                         "ReportElementType" => "0..1" ,
                                                                         "ReportElement" => "*" ), 
                                         "FK_ReportElements_ReportSections" => array(
                                                                         "ReportSection" => "0..1" ,
                                                                         "ReportElement" => "*" ), 
                                         "FK_ReportElements_ReportTypes" => array(
                                                                         "ReportType" => "0..1" ,
                                                                         "ReportElement" => "*" ), 
                                         "FK_ReportMergeFields_ReportTypes" => array(
                                                                         "ReportType" => "0..1" ,
                                                                         "ReportMergeField" => "*" ), 
                                         "FK_Reports_ReportTypes" => array(
                                                                         "ReportType" => "0..1" ,
                                                                         "Report" => "*" ), 
                                         "FK_ReportsComputersPrinters_Reports" => array(
                                                                         "Report" => "0..1" ,
                                                                         "ReportsComputersPrinter" => "*" ), 
                                         "FK_ReportSections_Reports" => array(
                                                                         "Report" => "0..1" ,
                                                                         "ReportSection" => "*" ), 
                                         "FK_ReportsMenus_Reports" => array(
                                                                         "Report" => "1" ,
                                                                         "ReportsMenu" => "*" ), 
                                         "FK_ReportsComputersPrinters_Computers" => array(
                                                                         "Computer" => "0..1" ,
                                                                         "ReportsComputersPrinter" => "*" ), 
                                         "FK_ReportSections_ReportSectionTypes" => array(
                                                                         "ReportSectionType" => "0..1" ,
                                                                         "ReportSection" => "*" ), 
                                         "FK_ReportsMenus_Menus" => array(
                                                                         "Menu" => "1" ,
                                                                         "ReportsMenu" => "*" ), 
                                         "ReportTypesMenus" => array(
                                                                         "Menu" => "*" ,
                                                                         "ReportType" => "*" ), 
                                         "FK_ListViewColumns_ListViews" => array(
                                                                         "ListView" => "0..1" ,
                                                                         "ListViewColumn" => "*" ), 
                                         "FK_ListViewUsersColumns_ListViewColumns" => array(
                                                                         "ListViewColumn" => "1" ,
                                                                         "ListViewUsersColumn" => "*" ), 
                                         "FK_ListViewColumns_TextAlignTypes" => array(
                                                                         "TextAlignType" => "1" ,
                                                                         "ListViewColumn" => "*" ), 
                                         "FK_Customers_CustomerRelationships" => array(
                                                                         "CustomerRelationship" => "0..1" ,
                                                                         "Customer" => "*" ), 
                                         "FK_Customers_CustomerTypes" => array(
                                                                         "CustomerType" => "0..1" ,
                                                                         "Customer" => "*" ), 
                                         "FK_PaymentAccountHumanTypes_PaymentAccountAccountantTypes" => array(
                                                                         "PaymentAccountAccountantType" => "0..1" ,
                                                                         "PaymentAccountHumanType" => "*" ), 
                                         "FK_PaymentAccounts_PaymentAccountHumanTypes" => array(
                                                                         "PaymentAccountHumanType" => "0..1" ,
                                                                         "PaymentAccount" => "*" ), 
                                         "FK_Payments_PaymentAccounts" => array(
                                                                         "PaymentAccount" => "1" ,
                                                                         "Payment" => "*" ), 
                                         "FK_Computers_PaymentAccounts" => array(
                                                                         "PaymentAccount" => "0..1" ,
                                                                         "Computer" => "*" ), 
                                         "FK_Computers_PaymentAccounts1" => array(
                                                                         "PaymentAccount" => "0..1" ,
                                                                         "Computer" => "*" ), 
                                         "FK_TillPaymentAccountRouting_PaymentAccounts" => array(
                                                                         "PaymentAccount" => "1" ,
                                                                         "TillPaymentAccountRouting" => "*" ), 
                                         "FK_PaymentMethods_PaymentMethodTypes" => array(
                                                                         "PaymentMethodType" => "0..1" ,
                                                                         "PaymentMethod" => "*" ), 
                                         "FK_Payments_PaymentMethods" => array(
                                                                         "PaymentMethod" => "1" ,
                                                                         "Payment" => "*" ), 
                                         "FK_TillPaymentAccountRouting_PaymentMethodTypes" => array(
                                                                         "PaymentMethodType" => "1" ,
                                                                         "TillPaymentAccountRouting" => "*" ), 
                                         "FK_Payments_PaymentTypes" => array(
                                                                         "PaymentType" => "0..1" ,
                                                                         "Payment" => "*" ), 
                                         "FK_TillPaymentAccountRouting_Computers" => array(
                                                                         "Computer" => "1" ,
                                                                         "TillPaymentAccountRouting" => "*" ), 
                                         "FK_Tasks_TaskScheduleTypesLookup" => array(
                                                                         "TaskScheduleTypesLookup" => "1" ,
                                                                         "Task" => "*" ), 
                                         "FK_Tasks_TaskTypesLookup" => array(
                                                                         "TaskTypesLookup" => "1" ,
                                                                         "Task" => "*" ), 
                                         "FK_TaskScheduleDay_Tasks" => array(
                                                                         "Task" => "1" ,
                                                                         "TaskScheduleDay" => "*" ), 
                                         "FK_TaskScheduleMonth_Tasks" => array(
                                                                         "Task" => "1" ,
                                                                         "TaskScheduleMonth" => "*" ), 
                                         "FK_TaskScheduleWeek_Tasks" => array(
                                                                         "Task" => "1" ,
                                                                         "TaskScheduleWeek" => "*" ), 
                                         "FK_ProductImportMappings_ProductImporterSettings" => array(
                                                                         "ProductImporterSetting" => "1" ,
                                                                         "ProductImportMapping" => "*" ), 
                                         "FK_EcommerceQueueItems_EcommerceQueues" => array(
                                                                         "EcommerceQueue" => "1" ,
                                                                         "EcommerceQueueItem" => "*" ), 
                                         "EcommerceQueuesEntityNames" => array(
                                                                         "EcommerceEntityName" => "*" ,
                                                                         "EcommerceQueue" => "*" ));

    
            $this->_Products = new DataServiceQuery('/'.'Products', $this);
            $this->_ProductCategories = new DataServiceQuery('/'.'ProductCategories', $this);
            $this->_ProductSubcategories = new DataServiceQuery('/'.'ProductSubcategories', $this);
            $this->_Config = new DataServiceQuery('/'.'Config', $this);
            $this->_Manufacturers = new DataServiceQuery('/'.'Manufacturers', $this);
            $this->_ProductTypes = new DataServiceQuery('/'.'ProductTypes', $this);
            $this->_KnowledgebaseCategories = new DataServiceQuery('/'.'KnowledgebaseCategories', $this);
            $this->_KnowledgebaseArticles = new DataServiceQuery('/'.'KnowledgebaseArticles', $this);
            $this->_PermissionCategories = new DataServiceQuery('/'.'PermissionCategories', $this);
            $this->_Permissions = new DataServiceQuery('/'.'Permissions', $this);
            $this->_Users = new DataServiceQuery('/'.'Users', $this);
            $this->_UsersDialoguesDoNotPrompt = new DataServiceQuery('/'.'UsersDialoguesDoNotPrompt', $this);
            $this->_Purchases = new DataServiceQuery('/'.'Purchases', $this);
            $this->_Suppliers = new DataServiceQuery('/'.'Suppliers', $this);
            $this->_PaymentTerms = new DataServiceQuery('/'.'PaymentTerms', $this);
            $this->_PurchaseDetails = new DataServiceQuery('/'.'PurchaseDetails', $this);
            $this->_PurchaseInternalNotes = new DataServiceQuery('/'.'PurchaseInternalNotes', $this);
            $this->_PurchaseStatuses = new DataServiceQuery('/'.'PurchaseStatuses', $this);
            $this->_PurchaseTypes = new DataServiceQuery('/'.'PurchaseTypes', $this);
            $this->_ProductInfo = new DataServiceQuery('/'.'ProductInfo', $this);
            $this->_ProductLocations = new DataServiceQuery('/'.'ProductLocations', $this);
            $this->_ProductsAllocatedToOrders = new DataServiceQuery('/'.'ProductsAllocatedToOrders', $this);
            $this->_TaxRates = new DataServiceQuery('/'.'TaxRates', $this);
            $this->_OrderStatuses = new DataServiceQuery('/'.'OrderStatuses', $this);
            $this->_OrderDetailStatus = new DataServiceQuery('/'.'OrderDetailStatus', $this);
            $this->_Orders = new DataServiceQuery('/'.'Orders', $this);
            $this->_OrderStatusTypes = new DataServiceQuery('/'.'OrderStatusTypes', $this);
            $this->_OrderTypes = new DataServiceQuery('/'.'OrderTypes', $this);
            $this->_DataTypes = new DataServiceQuery('/'.'DataTypes', $this);
            $this->_ReportElements = new DataServiceQuery('/'.'ReportElements', $this);
            $this->_ReportElementTypes = new DataServiceQuery('/'.'ReportElementTypes', $this);
            $this->_ReportFormatStrings = new DataServiceQuery('/'.'ReportFormatStrings', $this);
            $this->_ReportMergeFields = new DataServiceQuery('/'.'ReportMergeFields', $this);
            $this->_Reports = new DataServiceQuery('/'.'Reports', $this);
            $this->_ReportsComputersPrinters = new DataServiceQuery('/'.'ReportsComputersPrinters', $this);
            $this->_ReportSections = new DataServiceQuery('/'.'ReportSections', $this);
            $this->_ReportSectionTypes = new DataServiceQuery('/'.'ReportSectionTypes', $this);
            $this->_ReportsMenus = new DataServiceQuery('/'.'ReportsMenus', $this);
            $this->_ReportTypes = new DataServiceQuery('/'.'ReportTypes', $this);
            $this->_ListViewColumns = new DataServiceQuery('/'.'ListViewColumns', $this);
            $this->_ListViews = new DataServiceQuery('/'.'ListViews', $this);
            $this->_ListViewUsersColumns = new DataServiceQuery('/'.'ListViewUsersColumns', $this);
            $this->_CustomerRelationships = new DataServiceQuery('/'.'CustomerRelationships', $this);
            $this->_Customers = new DataServiceQuery('/'.'Customers', $this);
            $this->_CustomerTypes = new DataServiceQuery('/'.'CustomerTypes', $this);
            $this->_PaymentAccountAccountantTypes = new DataServiceQuery('/'.'PaymentAccountAccountantTypes', $this);
            $this->_PaymentAccountHumanTypes = new DataServiceQuery('/'.'PaymentAccountHumanTypes', $this);
            $this->_PaymentAccounts = new DataServiceQuery('/'.'PaymentAccounts', $this);
            $this->_PaymentMethods = new DataServiceQuery('/'.'PaymentMethods', $this);
            $this->_PaymentMethodTypes = new DataServiceQuery('/'.'PaymentMethodTypes', $this);
            $this->_Payments = new DataServiceQuery('/'.'Payments', $this);
            $this->_PaymentTransfers = new DataServiceQuery('/'.'PaymentTransfers', $this);
            $this->_PaymentTypes = new DataServiceQuery('/'.'PaymentTypes', $this);
            $this->_Backups = new DataServiceQuery('/'.'Backups', $this);
            $this->_BackupTypesLookups = new DataServiceQuery('/'.'BackupTypesLookups', $this);
            $this->_Computers = new DataServiceQuery('/'.'Computers', $this);
            $this->_Countries = new DataServiceQuery('/'.'Countries', $this);
            $this->_Histories = new DataServiceQuery('/'.'Histories', $this);
            $this->_HistoryEventTypesLookups = new DataServiceQuery('/'.'HistoryEventTypesLookups', $this);
            $this->_JobHours = new DataServiceQuery('/'.'JobHours', $this);
            $this->_Licences = new DataServiceQuery('/'.'Licences', $this);
            $this->_TillPaymentAccountRoutings = new DataServiceQuery('/'.'TillPaymentAccountRoutings', $this);
            $this->_Versions = new DataServiceQuery('/'.'Versions', $this);
            $this->_TextAlignTypes = new DataServiceQuery('/'.'TextAlignTypes', $this);
            $this->_EasifyTasks = new DataServiceQuery('/'.'EasifyTasks', $this);
            $this->_TaskScheduleDays = new DataServiceQuery('/'.'TaskScheduleDays', $this);
            $this->_TaskScheduleMonths = new DataServiceQuery('/'.'TaskScheduleMonths', $this);
            $this->_TaskScheduleTypesLookups = new DataServiceQuery('/'.'TaskScheduleTypesLookups', $this);
            $this->_TaskScheduleWeeks = new DataServiceQuery('/'.'TaskScheduleWeeks', $this);
            $this->_TaskTypesLookups = new DataServiceQuery('/'.'TaskTypesLookups', $this);
            $this->_ProductImporterSettings = new DataServiceQuery('/'.'ProductImporterSettings', $this);
            $this->_ProductImportMappings = new DataServiceQuery('/'.'ProductImportMappings', $this);
            $this->_ReportsPOSWhatToPrints = new DataServiceQuery('/'.'ReportsPOSWhatToPrints', $this);
            $this->_LoyaltyCards = new DataServiceQuery('/'.'LoyaltyCards', $this);
            $this->_Menus = new DataServiceQuery('/'.'Menus', $this);
            $this->_ProductCategoryTypes = new DataServiceQuery('/'.'ProductCategoryTypes', $this);
            $this->_EcommerceQueues = new DataServiceQuery('/'.'EcommerceQueues', $this);
            $this->_EcommerceQueueItems = new DataServiceQuery('/'.'EcommerceQueueItems', $this);
            $this->_EcommerceEntityNames = new DataServiceQuery('/'.'EcommerceEntityNames', $this);
            $this->_LoyaltyPoints = new DataServiceQuery('/'.'LoyaltyPoints', $this);
            $this->_OrderDetails = new DataServiceQuery('/'.'OrderDetails', $this);
            $this->_EmailQueues = new DataServiceQuery('/'.'EmailQueues', $this);
            $this->_ProductConditions = new DataServiceQuery('/'.'ProductConditions', $this);
            $this->_ProductInfoImages = new DataServiceQuery('/'.'ProductInfoImages', $this);
            $this->_BlobTransfers = new DataServiceQuery('/'.'BlobTransfers', $this);

        }

    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Products
         * @return DataServiceQuery
         */
        public function Products()
        {
            $this->_Products->ClearAllOptions();
            return $this->_Products;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ProductCategories
         * @return DataServiceQuery
         */
        public function ProductCategories()
        {
            $this->_ProductCategories->ClearAllOptions();
            return $this->_ProductCategories;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ProductSubcategories
         * @return DataServiceQuery
         */
        public function ProductSubcategories()
        {
            $this->_ProductSubcategories->ClearAllOptions();
            return $this->_ProductSubcategories;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Config
         * @return DataServiceQuery
         */
        public function Config()
        {
            $this->_Config->ClearAllOptions();
            return $this->_Config;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Manufacturers
         * @return DataServiceQuery
         */
        public function Manufacturers()
        {
            $this->_Manufacturers->ClearAllOptions();
            return $this->_Manufacturers;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ProductTypes
         * @return DataServiceQuery
         */
        public function ProductTypes()
        {
            $this->_ProductTypes->ClearAllOptions();
            return $this->_ProductTypes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset KnowledgebaseCategories
         * @return DataServiceQuery
         */
        public function KnowledgebaseCategories()
        {
            $this->_KnowledgebaseCategories->ClearAllOptions();
            return $this->_KnowledgebaseCategories;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset KnowledgebaseArticles
         * @return DataServiceQuery
         */
        public function KnowledgebaseArticles()
        {
            $this->_KnowledgebaseArticles->ClearAllOptions();
            return $this->_KnowledgebaseArticles;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset PermissionCategories
         * @return DataServiceQuery
         */
        public function PermissionCategories()
        {
            $this->_PermissionCategories->ClearAllOptions();
            return $this->_PermissionCategories;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Permissions
         * @return DataServiceQuery
         */
        public function Permissions()
        {
            $this->_Permissions->ClearAllOptions();
            return $this->_Permissions;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Users
         * @return DataServiceQuery
         */
        public function Users()
        {
            $this->_Users->ClearAllOptions();
            return $this->_Users;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset UsersDialoguesDoNotPrompt
         * @return DataServiceQuery
         */
        public function UsersDialoguesDoNotPrompt()
        {
            $this->_UsersDialoguesDoNotPrompt->ClearAllOptions();
            return $this->_UsersDialoguesDoNotPrompt;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Purchases
         * @return DataServiceQuery
         */
        public function Purchases()
        {
            $this->_Purchases->ClearAllOptions();
            return $this->_Purchases;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Suppliers
         * @return DataServiceQuery
         */
        public function Suppliers()
        {
            $this->_Suppliers->ClearAllOptions();
            return $this->_Suppliers;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset PaymentTerms
         * @return DataServiceQuery
         */
        public function PaymentTerms()
        {
            $this->_PaymentTerms->ClearAllOptions();
            return $this->_PaymentTerms;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset PurchaseDetails
         * @return DataServiceQuery
         */
        public function PurchaseDetails()
        {
            $this->_PurchaseDetails->ClearAllOptions();
            return $this->_PurchaseDetails;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset PurchaseInternalNotes
         * @return DataServiceQuery
         */
        public function PurchaseInternalNotes()
        {
            $this->_PurchaseInternalNotes->ClearAllOptions();
            return $this->_PurchaseInternalNotes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset PurchaseStatuses
         * @return DataServiceQuery
         */
        public function PurchaseStatuses()
        {
            $this->_PurchaseStatuses->ClearAllOptions();
            return $this->_PurchaseStatuses;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset PurchaseTypes
         * @return DataServiceQuery
         */
        public function PurchaseTypes()
        {
            $this->_PurchaseTypes->ClearAllOptions();
            return $this->_PurchaseTypes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ProductInfo
         * @return DataServiceQuery
         */
        public function ProductInfo()
        {
            $this->_ProductInfo->ClearAllOptions();
            return $this->_ProductInfo;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ProductLocations
         * @return DataServiceQuery
         */
        public function ProductLocations()
        {
            $this->_ProductLocations->ClearAllOptions();
            return $this->_ProductLocations;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ProductsAllocatedToOrders
         * @return DataServiceQuery
         */
        public function ProductsAllocatedToOrders()
        {
            $this->_ProductsAllocatedToOrders->ClearAllOptions();
            return $this->_ProductsAllocatedToOrders;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset TaxRates
         * @return DataServiceQuery
         */
        public function TaxRates()
        {
            $this->_TaxRates->ClearAllOptions();
            return $this->_TaxRates;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset OrderStatuses
         * @return DataServiceQuery
         */
        public function OrderStatuses()
        {
            $this->_OrderStatuses->ClearAllOptions();
            return $this->_OrderStatuses;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset OrderDetailStatus
         * @return DataServiceQuery
         */
        public function OrderDetailStatus()
        {
            $this->_OrderDetailStatus->ClearAllOptions();
            return $this->_OrderDetailStatus;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Orders
         * @return DataServiceQuery
         */
        public function Orders()
        {
            $this->_Orders->ClearAllOptions();
            return $this->_Orders;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset OrderStatusTypes
         * @return DataServiceQuery
         */
        public function OrderStatusTypes()
        {
            $this->_OrderStatusTypes->ClearAllOptions();
            return $this->_OrderStatusTypes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset OrderTypes
         * @return DataServiceQuery
         */
        public function OrderTypes()
        {
            $this->_OrderTypes->ClearAllOptions();
            return $this->_OrderTypes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset DataTypes
         * @return DataServiceQuery
         */
        public function DataTypes()
        {
            $this->_DataTypes->ClearAllOptions();
            return $this->_DataTypes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ReportElements
         * @return DataServiceQuery
         */
        public function ReportElements()
        {
            $this->_ReportElements->ClearAllOptions();
            return $this->_ReportElements;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ReportElementTypes
         * @return DataServiceQuery
         */
        public function ReportElementTypes()
        {
            $this->_ReportElementTypes->ClearAllOptions();
            return $this->_ReportElementTypes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ReportFormatStrings
         * @return DataServiceQuery
         */
        public function ReportFormatStrings()
        {
            $this->_ReportFormatStrings->ClearAllOptions();
            return $this->_ReportFormatStrings;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ReportMergeFields
         * @return DataServiceQuery
         */
        public function ReportMergeFields()
        {
            $this->_ReportMergeFields->ClearAllOptions();
            return $this->_ReportMergeFields;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Reports
         * @return DataServiceQuery
         */
        public function Reports()
        {
            $this->_Reports->ClearAllOptions();
            return $this->_Reports;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ReportsComputersPrinters
         * @return DataServiceQuery
         */
        public function ReportsComputersPrinters()
        {
            $this->_ReportsComputersPrinters->ClearAllOptions();
            return $this->_ReportsComputersPrinters;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ReportSections
         * @return DataServiceQuery
         */
        public function ReportSections()
        {
            $this->_ReportSections->ClearAllOptions();
            return $this->_ReportSections;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ReportSectionTypes
         * @return DataServiceQuery
         */
        public function ReportSectionTypes()
        {
            $this->_ReportSectionTypes->ClearAllOptions();
            return $this->_ReportSectionTypes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ReportsMenus
         * @return DataServiceQuery
         */
        public function ReportsMenus()
        {
            $this->_ReportsMenus->ClearAllOptions();
            return $this->_ReportsMenus;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ReportTypes
         * @return DataServiceQuery
         */
        public function ReportTypes()
        {
            $this->_ReportTypes->ClearAllOptions();
            return $this->_ReportTypes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ListViewColumns
         * @return DataServiceQuery
         */
        public function ListViewColumns()
        {
            $this->_ListViewColumns->ClearAllOptions();
            return $this->_ListViewColumns;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ListViews
         * @return DataServiceQuery
         */
        public function ListViews()
        {
            $this->_ListViews->ClearAllOptions();
            return $this->_ListViews;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ListViewUsersColumns
         * @return DataServiceQuery
         */
        public function ListViewUsersColumns()
        {
            $this->_ListViewUsersColumns->ClearAllOptions();
            return $this->_ListViewUsersColumns;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset CustomerRelationships
         * @return DataServiceQuery
         */
        public function CustomerRelationships()
        {
            $this->_CustomerRelationships->ClearAllOptions();
            return $this->_CustomerRelationships;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Customers
         * @return DataServiceQuery
         */
        public function Customers()
        {
            $this->_Customers->ClearAllOptions();
            return $this->_Customers;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset CustomerTypes
         * @return DataServiceQuery
         */
        public function CustomerTypes()
        {
            $this->_CustomerTypes->ClearAllOptions();
            return $this->_CustomerTypes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset PaymentAccountAccountantTypes
         * @return DataServiceQuery
         */
        public function PaymentAccountAccountantTypes()
        {
            $this->_PaymentAccountAccountantTypes->ClearAllOptions();
            return $this->_PaymentAccountAccountantTypes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset PaymentAccountHumanTypes
         * @return DataServiceQuery
         */
        public function PaymentAccountHumanTypes()
        {
            $this->_PaymentAccountHumanTypes->ClearAllOptions();
            return $this->_PaymentAccountHumanTypes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset PaymentAccounts
         * @return DataServiceQuery
         */
        public function PaymentAccounts()
        {
            $this->_PaymentAccounts->ClearAllOptions();
            return $this->_PaymentAccounts;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset PaymentMethods
         * @return DataServiceQuery
         */
        public function PaymentMethods()
        {
            $this->_PaymentMethods->ClearAllOptions();
            return $this->_PaymentMethods;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset PaymentMethodTypes
         * @return DataServiceQuery
         */
        public function PaymentMethodTypes()
        {
            $this->_PaymentMethodTypes->ClearAllOptions();
            return $this->_PaymentMethodTypes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Payments
         * @return DataServiceQuery
         */
        public function Payments()
        {
            $this->_Payments->ClearAllOptions();
            return $this->_Payments;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset PaymentTransfers
         * @return DataServiceQuery
         */
        public function PaymentTransfers()
        {
            $this->_PaymentTransfers->ClearAllOptions();
            return $this->_PaymentTransfers;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset PaymentTypes
         * @return DataServiceQuery
         */
        public function PaymentTypes()
        {
            $this->_PaymentTypes->ClearAllOptions();
            return $this->_PaymentTypes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Backups
         * @return DataServiceQuery
         */
        public function Backups()
        {
            $this->_Backups->ClearAllOptions();
            return $this->_Backups;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset BackupTypesLookups
         * @return DataServiceQuery
         */
        public function BackupTypesLookups()
        {
            $this->_BackupTypesLookups->ClearAllOptions();
            return $this->_BackupTypesLookups;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Computers
         * @return DataServiceQuery
         */
        public function Computers()
        {
            $this->_Computers->ClearAllOptions();
            return $this->_Computers;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Countries
         * @return DataServiceQuery
         */
        public function Countries()
        {
            $this->_Countries->ClearAllOptions();
            return $this->_Countries;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Histories
         * @return DataServiceQuery
         */
        public function Histories()
        {
            $this->_Histories->ClearAllOptions();
            return $this->_Histories;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset HistoryEventTypesLookups
         * @return DataServiceQuery
         */
        public function HistoryEventTypesLookups()
        {
            $this->_HistoryEventTypesLookups->ClearAllOptions();
            return $this->_HistoryEventTypesLookups;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset JobHours
         * @return DataServiceQuery
         */
        public function JobHours()
        {
            $this->_JobHours->ClearAllOptions();
            return $this->_JobHours;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Licences
         * @return DataServiceQuery
         */
        public function Licences()
        {
            $this->_Licences->ClearAllOptions();
            return $this->_Licences;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset TillPaymentAccountRoutings
         * @return DataServiceQuery
         */
        public function TillPaymentAccountRoutings()
        {
            $this->_TillPaymentAccountRoutings->ClearAllOptions();
            return $this->_TillPaymentAccountRoutings;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Versions
         * @return DataServiceQuery
         */
        public function Versions()
        {
            $this->_Versions->ClearAllOptions();
            return $this->_Versions;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset TextAlignTypes
         * @return DataServiceQuery
         */
        public function TextAlignTypes()
        {
            $this->_TextAlignTypes->ClearAllOptions();
            return $this->_TextAlignTypes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset EasifyTasks
         * @return DataServiceQuery
         */
        public function EasifyTasks()
        {
            $this->_EasifyTasks->ClearAllOptions();
            return $this->_EasifyTasks;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset TaskScheduleDays
         * @return DataServiceQuery
         */
        public function TaskScheduleDays()
        {
            $this->_TaskScheduleDays->ClearAllOptions();
            return $this->_TaskScheduleDays;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset TaskScheduleMonths
         * @return DataServiceQuery
         */
        public function TaskScheduleMonths()
        {
            $this->_TaskScheduleMonths->ClearAllOptions();
            return $this->_TaskScheduleMonths;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset TaskScheduleTypesLookups
         * @return DataServiceQuery
         */
        public function TaskScheduleTypesLookups()
        {
            $this->_TaskScheduleTypesLookups->ClearAllOptions();
            return $this->_TaskScheduleTypesLookups;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset TaskScheduleWeeks
         * @return DataServiceQuery
         */
        public function TaskScheduleWeeks()
        {
            $this->_TaskScheduleWeeks->ClearAllOptions();
            return $this->_TaskScheduleWeeks;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset TaskTypesLookups
         * @return DataServiceQuery
         */
        public function TaskTypesLookups()
        {
            $this->_TaskTypesLookups->ClearAllOptions();
            return $this->_TaskTypesLookups;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ProductImporterSettings
         * @return DataServiceQuery
         */
        public function ProductImporterSettings()
        {
            $this->_ProductImporterSettings->ClearAllOptions();
            return $this->_ProductImporterSettings;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ProductImportMappings
         * @return DataServiceQuery
         */
        public function ProductImportMappings()
        {
            $this->_ProductImportMappings->ClearAllOptions();
            return $this->_ProductImportMappings;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ReportsPOSWhatToPrints
         * @return DataServiceQuery
         */
        public function ReportsPOSWhatToPrints()
        {
            $this->_ReportsPOSWhatToPrints->ClearAllOptions();
            return $this->_ReportsPOSWhatToPrints;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset LoyaltyCards
         * @return DataServiceQuery
         */
        public function LoyaltyCards()
        {
            $this->_LoyaltyCards->ClearAllOptions();
            return $this->_LoyaltyCards;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset Menus
         * @return DataServiceQuery
         */
        public function Menus()
        {
            $this->_Menus->ClearAllOptions();
            return $this->_Menus;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ProductCategoryTypes
         * @return DataServiceQuery
         */
        public function ProductCategoryTypes()
        {
            $this->_ProductCategoryTypes->ClearAllOptions();
            return $this->_ProductCategoryTypes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset EcommerceQueues
         * @return DataServiceQuery
         */
        public function EcommerceQueues()
        {
            $this->_EcommerceQueues->ClearAllOptions();
            return $this->_EcommerceQueues;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset EcommerceQueueItems
         * @return DataServiceQuery
         */
        public function EcommerceQueueItems()
        {
            $this->_EcommerceQueueItems->ClearAllOptions();
            return $this->_EcommerceQueueItems;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset EcommerceEntityNames
         * @return DataServiceQuery
         */
        public function EcommerceEntityNames()
        {
            $this->_EcommerceEntityNames->ClearAllOptions();
            return $this->_EcommerceEntityNames;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset LoyaltyPoints
         * @return DataServiceQuery
         */
        public function LoyaltyPoints()
        {
            $this->_LoyaltyPoints->ClearAllOptions();
            return $this->_LoyaltyPoints;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset OrderDetails
         * @return DataServiceQuery
         */
        public function OrderDetails()
        {
            $this->_OrderDetails->ClearAllOptions();
            return $this->_OrderDetails;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset EmailQueues
         * @return DataServiceQuery
         */
        public function EmailQueues()
        {
            $this->_EmailQueues->ClearAllOptions();
            return $this->_EmailQueues;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ProductConditions
         * @return DataServiceQuery
         */
        public function ProductConditions()
        {
            $this->_ProductConditions->ClearAllOptions();
            return $this->_ProductConditions;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ProductInfoImages
         * @return DataServiceQuery
         */
        public function ProductInfoImages()
        {
            $this->_ProductInfoImages->ClearAllOptions();
            return $this->_ProductInfoImages;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset BlobTransfers
         * @return DataServiceQuery
         */
        public function BlobTransfers()
        {
            $this->_BlobTransfers->ClearAllOptions();
            return $this->_BlobTransfers;
        }
    
       /**
        * Functions for adding object to the entityset/collection
        */
    
       /**
        * Add Products
        * @param Products $object
        */
      public function AddToProducts($object)
        {
            return parent::AddObject('Products', $object);
        }
    
       /**
        * Add ProductCategories
        * @param ProductCategories $object
        */
      public function AddToProductCategories($object)
        {
            return parent::AddObject('ProductCategories', $object);
        }
    
       /**
        * Add ProductSubcategories
        * @param ProductSubcategories $object
        */
      public function AddToProductSubcategories($object)
        {
            return parent::AddObject('ProductSubcategories', $object);
        }
    
       /**
        * Add Config
        * @param Config $object
        */
      public function AddToConfig($object)
        {
            return parent::AddObject('Config', $object);
        }
    
       /**
        * Add Manufacturers
        * @param Manufacturers $object
        */
      public function AddToManufacturers($object)
        {
            return parent::AddObject('Manufacturers', $object);
        }
    
       /**
        * Add ProductTypes
        * @param ProductTypes $object
        */
      public function AddToProductTypes($object)
        {
            return parent::AddObject('ProductTypes', $object);
        }
    
       /**
        * Add KnowledgebaseCategories
        * @param KnowledgebaseCategories $object
        */
      public function AddToKnowledgebaseCategories($object)
        {
            return parent::AddObject('KnowledgebaseCategories', $object);
        }
    
       /**
        * Add KnowledgebaseArticles
        * @param KnowledgebaseArticles $object
        */
      public function AddToKnowledgebaseArticles($object)
        {
            return parent::AddObject('KnowledgebaseArticles', $object);
        }
    
       /**
        * Add PermissionCategories
        * @param PermissionCategories $object
        */
      public function AddToPermissionCategories($object)
        {
            return parent::AddObject('PermissionCategories', $object);
        }
    
       /**
        * Add Permissions
        * @param Permissions $object
        */
      public function AddToPermissions($object)
        {
            return parent::AddObject('Permissions', $object);
        }
    
       /**
        * Add Users
        * @param Users $object
        */
      public function AddToUsers($object)
        {
            return parent::AddObject('Users', $object);
        }
    
       /**
        * Add UsersDialoguesDoNotPrompt
        * @param UsersDialoguesDoNotPrompt $object
        */
      public function AddToUsersDialoguesDoNotPrompt($object)
        {
            return parent::AddObject('UsersDialoguesDoNotPrompt', $object);
        }
    
       /**
        * Add Purchases
        * @param Purchases $object
        */
      public function AddToPurchases($object)
        {
            return parent::AddObject('Purchases', $object);
        }
    
       /**
        * Add Suppliers
        * @param Suppliers $object
        */
      public function AddToSuppliers($object)
        {
            return parent::AddObject('Suppliers', $object);
        }
    
       /**
        * Add PaymentTerms
        * @param PaymentTerms $object
        */
      public function AddToPaymentTerms($object)
        {
            return parent::AddObject('PaymentTerms', $object);
        }
    
       /**
        * Add PurchaseDetails
        * @param PurchaseDetails $object
        */
      public function AddToPurchaseDetails($object)
        {
            return parent::AddObject('PurchaseDetails', $object);
        }
    
       /**
        * Add PurchaseInternalNotes
        * @param PurchaseInternalNotes $object
        */
      public function AddToPurchaseInternalNotes($object)
        {
            return parent::AddObject('PurchaseInternalNotes', $object);
        }
    
       /**
        * Add PurchaseStatuses
        * @param PurchaseStatuses $object
        */
      public function AddToPurchaseStatuses($object)
        {
            return parent::AddObject('PurchaseStatuses', $object);
        }
    
       /**
        * Add PurchaseTypes
        * @param PurchaseTypes $object
        */
      public function AddToPurchaseTypes($object)
        {
            return parent::AddObject('PurchaseTypes', $object);
        }
    
       /**
        * Add ProductInfo
        * @param ProductInfo $object
        */
      public function AddToProductInfo($object)
        {
            return parent::AddObject('ProductInfo', $object);
        }
    
       /**
        * Add ProductLocations
        * @param ProductLocations $object
        */
      public function AddToProductLocations($object)
        {
            return parent::AddObject('ProductLocations', $object);
        }
    
       /**
        * Add ProductsAllocatedToOrders
        * @param ProductsAllocatedToOrders $object
        */
      public function AddToProductsAllocatedToOrders($object)
        {
            return parent::AddObject('ProductsAllocatedToOrders', $object);
        }
    
       /**
        * Add TaxRates
        * @param TaxRates $object
        */
      public function AddToTaxRates($object)
        {
            return parent::AddObject('TaxRates', $object);
        }
    
       /**
        * Add OrderStatuses
        * @param OrderStatuses $object
        */
      public function AddToOrderStatuses($object)
        {
            return parent::AddObject('OrderStatuses', $object);
        }
    
       /**
        * Add OrderDetailStatus
        * @param OrderDetailStatus $object
        */
      public function AddToOrderDetailStatus($object)
        {
            return parent::AddObject('OrderDetailStatus', $object);
        }
    
       /**
        * Add Orders
        * @param Orders $object
        */
      public function AddToOrders($object)
        {
            return parent::AddObject('Orders', $object);
        }
    
       /**
        * Add OrderStatusTypes
        * @param OrderStatusTypes $object
        */
      public function AddToOrderStatusTypes($object)
        {
            return parent::AddObject('OrderStatusTypes', $object);
        }
    
       /**
        * Add OrderTypes
        * @param OrderTypes $object
        */
      public function AddToOrderTypes($object)
        {
            return parent::AddObject('OrderTypes', $object);
        }
    
       /**
        * Add DataTypes
        * @param DataTypes $object
        */
      public function AddToDataTypes($object)
        {
            return parent::AddObject('DataTypes', $object);
        }
    
       /**
        * Add ReportElements
        * @param ReportElements $object
        */
      public function AddToReportElements($object)
        {
            return parent::AddObject('ReportElements', $object);
        }
    
       /**
        * Add ReportElementTypes
        * @param ReportElementTypes $object
        */
      public function AddToReportElementTypes($object)
        {
            return parent::AddObject('ReportElementTypes', $object);
        }
    
       /**
        * Add ReportFormatStrings
        * @param ReportFormatStrings $object
        */
      public function AddToReportFormatStrings($object)
        {
            return parent::AddObject('ReportFormatStrings', $object);
        }
    
       /**
        * Add ReportMergeFields
        * @param ReportMergeFields $object
        */
      public function AddToReportMergeFields($object)
        {
            return parent::AddObject('ReportMergeFields', $object);
        }
    
       /**
        * Add Reports
        * @param Reports $object
        */
      public function AddToReports($object)
        {
            return parent::AddObject('Reports', $object);
        }
    
       /**
        * Add ReportsComputersPrinters
        * @param ReportsComputersPrinters $object
        */
      public function AddToReportsComputersPrinters($object)
        {
            return parent::AddObject('ReportsComputersPrinters', $object);
        }
    
       /**
        * Add ReportSections
        * @param ReportSections $object
        */
      public function AddToReportSections($object)
        {
            return parent::AddObject('ReportSections', $object);
        }
    
       /**
        * Add ReportSectionTypes
        * @param ReportSectionTypes $object
        */
      public function AddToReportSectionTypes($object)
        {
            return parent::AddObject('ReportSectionTypes', $object);
        }
    
       /**
        * Add ReportsMenus
        * @param ReportsMenus $object
        */
      public function AddToReportsMenus($object)
        {
            return parent::AddObject('ReportsMenus', $object);
        }
    
       /**
        * Add ReportTypes
        * @param ReportTypes $object
        */
      public function AddToReportTypes($object)
        {
            return parent::AddObject('ReportTypes', $object);
        }
    
       /**
        * Add ListViewColumns
        * @param ListViewColumns $object
        */
      public function AddToListViewColumns($object)
        {
            return parent::AddObject('ListViewColumns', $object);
        }
    
       /**
        * Add ListViews
        * @param ListViews $object
        */
      public function AddToListViews($object)
        {
            return parent::AddObject('ListViews', $object);
        }
    
       /**
        * Add ListViewUsersColumns
        * @param ListViewUsersColumns $object
        */
      public function AddToListViewUsersColumns($object)
        {
            return parent::AddObject('ListViewUsersColumns', $object);
        }
    
       /**
        * Add CustomerRelationships
        * @param CustomerRelationships $object
        */
      public function AddToCustomerRelationships($object)
        {
            return parent::AddObject('CustomerRelationships', $object);
        }
    
       /**
        * Add Customers
        * @param Customers $object
        */
      public function AddToCustomers($object)
        {
            return parent::AddObject('Customers', $object);
        }
    
       /**
        * Add CustomerTypes
        * @param CustomerTypes $object
        */
      public function AddToCustomerTypes($object)
        {
            return parent::AddObject('CustomerTypes', $object);
        }
    
       /**
        * Add PaymentAccountAccountantTypes
        * @param PaymentAccountAccountantTypes $object
        */
      public function AddToPaymentAccountAccountantTypes($object)
        {
            return parent::AddObject('PaymentAccountAccountantTypes', $object);
        }
    
       /**
        * Add PaymentAccountHumanTypes
        * @param PaymentAccountHumanTypes $object
        */
      public function AddToPaymentAccountHumanTypes($object)
        {
            return parent::AddObject('PaymentAccountHumanTypes', $object);
        }
    
       /**
        * Add PaymentAccounts
        * @param PaymentAccounts $object
        */
      public function AddToPaymentAccounts($object)
        {
            return parent::AddObject('PaymentAccounts', $object);
        }
    
       /**
        * Add PaymentMethods
        * @param PaymentMethods $object
        */
      public function AddToPaymentMethods($object)
        {
            return parent::AddObject('PaymentMethods', $object);
        }
    
       /**
        * Add PaymentMethodTypes
        * @param PaymentMethodTypes $object
        */
      public function AddToPaymentMethodTypes($object)
        {
            return parent::AddObject('PaymentMethodTypes', $object);
        }
    
       /**
        * Add Payments
        * @param Payments $object
        */
      public function AddToPayments($object)
        {
            return parent::AddObject('Payments', $object);
        }
    
       /**
        * Add PaymentTransfers
        * @param PaymentTransfers $object
        */
      public function AddToPaymentTransfers($object)
        {
            return parent::AddObject('PaymentTransfers', $object);
        }
    
       /**
        * Add PaymentTypes
        * @param PaymentTypes $object
        */
      public function AddToPaymentTypes($object)
        {
            return parent::AddObject('PaymentTypes', $object);
        }
    
       /**
        * Add Backups
        * @param Backups $object
        */
      public function AddToBackups($object)
        {
            return parent::AddObject('Backups', $object);
        }
    
       /**
        * Add BackupTypesLookups
        * @param BackupTypesLookups $object
        */
      public function AddToBackupTypesLookups($object)
        {
            return parent::AddObject('BackupTypesLookups', $object);
        }
    
       /**
        * Add Computers
        * @param Computers $object
        */
      public function AddToComputers($object)
        {
            return parent::AddObject('Computers', $object);
        }
    
       /**
        * Add Countries
        * @param Countries $object
        */
      public function AddToCountries($object)
        {
            return parent::AddObject('Countries', $object);
        }
    
       /**
        * Add Histories
        * @param Histories $object
        */
      public function AddToHistories($object)
        {
            return parent::AddObject('Histories', $object);
        }
    
       /**
        * Add HistoryEventTypesLookups
        * @param HistoryEventTypesLookups $object
        */
      public function AddToHistoryEventTypesLookups($object)
        {
            return parent::AddObject('HistoryEventTypesLookups', $object);
        }
    
       /**
        * Add JobHours
        * @param JobHours $object
        */
      public function AddToJobHours($object)
        {
            return parent::AddObject('JobHours', $object);
        }
    
       /**
        * Add Licences
        * @param Licences $object
        */
      public function AddToLicences($object)
        {
            return parent::AddObject('Licences', $object);
        }
    
       /**
        * Add TillPaymentAccountRoutings
        * @param TillPaymentAccountRoutings $object
        */
      public function AddToTillPaymentAccountRoutings($object)
        {
            return parent::AddObject('TillPaymentAccountRoutings', $object);
        }
    
       /**
        * Add Versions
        * @param Versions $object
        */
      public function AddToVersions($object)
        {
            return parent::AddObject('Versions', $object);
        }
    
       /**
        * Add TextAlignTypes
        * @param TextAlignTypes $object
        */
      public function AddToTextAlignTypes($object)
        {
            return parent::AddObject('TextAlignTypes', $object);
        }
    
       /**
        * Add EasifyTasks
        * @param EasifyTasks $object
        */
      public function AddToEasifyTasks($object)
        {
            return parent::AddObject('EasifyTasks', $object);
        }
    
       /**
        * Add TaskScheduleDays
        * @param TaskScheduleDays $object
        */
      public function AddToTaskScheduleDays($object)
        {
            return parent::AddObject('TaskScheduleDays', $object);
        }
    
       /**
        * Add TaskScheduleMonths
        * @param TaskScheduleMonths $object
        */
      public function AddToTaskScheduleMonths($object)
        {
            return parent::AddObject('TaskScheduleMonths', $object);
        }
    
       /**
        * Add TaskScheduleTypesLookups
        * @param TaskScheduleTypesLookups $object
        */
      public function AddToTaskScheduleTypesLookups($object)
        {
            return parent::AddObject('TaskScheduleTypesLookups', $object);
        }
    
       /**
        * Add TaskScheduleWeeks
        * @param TaskScheduleWeeks $object
        */
      public function AddToTaskScheduleWeeks($object)
        {
            return parent::AddObject('TaskScheduleWeeks', $object);
        }
    
       /**
        * Add TaskTypesLookups
        * @param TaskTypesLookups $object
        */
      public function AddToTaskTypesLookups($object)
        {
            return parent::AddObject('TaskTypesLookups', $object);
        }
    
       /**
        * Add ProductImporterSettings
        * @param ProductImporterSettings $object
        */
      public function AddToProductImporterSettings($object)
        {
            return parent::AddObject('ProductImporterSettings', $object);
        }
    
       /**
        * Add ProductImportMappings
        * @param ProductImportMappings $object
        */
      public function AddToProductImportMappings($object)
        {
            return parent::AddObject('ProductImportMappings', $object);
        }
    
       /**
        * Add ReportsPOSWhatToPrints
        * @param ReportsPOSWhatToPrints $object
        */
      public function AddToReportsPOSWhatToPrints($object)
        {
            return parent::AddObject('ReportsPOSWhatToPrints', $object);
        }
    
       /**
        * Add LoyaltyCards
        * @param LoyaltyCards $object
        */
      public function AddToLoyaltyCards($object)
        {
            return parent::AddObject('LoyaltyCards', $object);
        }
    
       /**
        * Add Menus
        * @param Menus $object
        */
      public function AddToMenus($object)
        {
            return parent::AddObject('Menus', $object);
        }
    
       /**
        * Add ProductCategoryTypes
        * @param ProductCategoryTypes $object
        */
      public function AddToProductCategoryTypes($object)
        {
            return parent::AddObject('ProductCategoryTypes', $object);
        }
    
       /**
        * Add EcommerceQueues
        * @param EcommerceQueues $object
        */
      public function AddToEcommerceQueues($object)
        {
            return parent::AddObject('EcommerceQueues', $object);
        }
    
       /**
        * Add EcommerceQueueItems
        * @param EcommerceQueueItems $object
        */
      public function AddToEcommerceQueueItems($object)
        {
            return parent::AddObject('EcommerceQueueItems', $object);
        }
    
       /**
        * Add EcommerceEntityNames
        * @param EcommerceEntityNames $object
        */
      public function AddToEcommerceEntityNames($object)
        {
            return parent::AddObject('EcommerceEntityNames', $object);
        }
    
       /**
        * Add LoyaltyPoints
        * @param LoyaltyPoints $object
        */
      public function AddToLoyaltyPoints($object)
        {
            return parent::AddObject('LoyaltyPoints', $object);
        }
    
       /**
        * Add OrderDetails
        * @param OrderDetails $object
        */
      public function AddToOrderDetails($object)
        {
            return parent::AddObject('OrderDetails', $object);
        }
    
       /**
        * Add EmailQueues
        * @param EmailQueues $object
        */
      public function AddToEmailQueues($object)
        {
            return parent::AddObject('EmailQueues', $object);
        }
    
       /**
        * Add ProductConditions
        * @param ProductConditions $object
        */
      public function AddToProductConditions($object)
        {
            return parent::AddObject('ProductConditions', $object);
        }
    
       /**
        * Add ProductInfoImages
        * @param ProductInfoImages $object
        */
      public function AddToProductInfoImages($object)
        {
            return parent::AddObject('ProductInfoImages', $object);
        }
    
       /**
        * Add BlobTransfers
        * @param BlobTransfers $object
        */
      public function AddToBlobTransfers($object)
        {
            return parent::AddObject('BlobTransfers', $object);
        }
    

       /**
        * This function returns the entities.
        */
        public function getEntities()
        {
            return $this->_entities;
        }
    }
  
?>
  